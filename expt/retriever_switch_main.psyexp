<?xml version="1.0" ?>
<PsychoPy2experiment encoding="utf-8" version="2022.2.2">
  <Settings>
    <Param val="use prefs" valType="str" updates="None" name="Audio latency priority"/>
    <Param val="use prefs" valType="str" updates="None" name="Audio lib"/>
    <Param val="https://app.prolific.co/submissions/complete?cc=17CBD1FA" valType="str" updates="None" name="Completed URL"/>
    <Param val="auto" valType="str" updates="None" name="Data file delimiter"/>
    <Param val="u'data/%s_%s_%s' % (expInfo['participant'], expName, expInfo['date'])" valType="code" updates="None" name="Data filename"/>
    <Param val="True" valType="bool" updates="None" name="Enable Escape"/>
    <Param val="{'participant': ''}" valType="code" updates="None" name="Experiment info"/>
    <Param val="True" valType="bool" updates="None" name="Force stereo"/>
    <Param val="True" valType="bool" updates="None" name="Full-screen window"/>
    <Param val="" valType="str" updates="None" name="HTML path"/>
    <Param val="" valType="str" updates="None" name="Incomplete URL"/>
    <Param val="testMonitor" valType="str" updates="None" name="Monitor"/>
    <Param val="['expt_3/resources/stimuli_practice_decision/01_rabbit.jpg', 'expt_3/resources/stimuli_practice_decision/02_canary.jpg', 'expt_3/resources/stimuli_practice_decision/03_squirrel.jpg', 'expt_3/resources/stimuli_practice_decision/04_beetle.jpg', 'expt_3/resources/stimuli_practice_decision/05_glasses.jpg', 'expt_3/resources/stimuli_practice_decision/06_pullover.jpg', 'expt_3/resources/stimuli_practice_decision/07_sock.jpg', 'expt_3/resources/stimuli_practice_decision/08_handmixer.jpg', 'expt_3/resources/stimuli_practice_decision/stimuli_info_tab.txt', 'expt_3/resources/sequences_IDs/B/01_redfox.jpg', 'expt_3/resources/sequences_IDs/B/02_dolphin.jpg', 'expt_3/resources/sequences_IDs/B/03_giraffe.jpg', 'expt_3/resources/sequences_IDs/B/04_holdfast.jpg', 'expt_3/resources/sequences_IDs/B/05_parrot.jpg', 'expt_3/resources/sequences_IDs/B/06_gloves.jpg', 'expt_3/resources/sequences_IDs/B/07_sport_tshirt.jpg', 'expt_3/resources/sequences_IDs/B/08_slipper.jpg', 'expt_3/resources/sequences_IDs/B/09_phone.jpg', 'expt_3/resources/sequences_IDs/B/10_radio.jpg', 'expt_3/resources/sequences_IDs/B/stimuli_info_tab.txt', 'expt_3/resources/sequences_IDs/A/01_wolf.jpg', 'expt_3/resources/sequences_IDs/A/02_seaturtle.jpg', 'expt_3/resources/sequences_IDs/A/03_camel.jpg', 'expt_3/resources/sequences_IDs/A/04_clownfish.jpg', 'expt_3/resources/sequences_IDs/A/05_peacock.jpg', 'expt_3/resources/sequences_IDs/A/06_scarf.jpg', 'expt_3/resources/sequences_IDs/A/07_dress.jpg', 'expt_3/resources/sequences_IDs/A/08_hat.jpg', 'expt_3/resources/sequences_IDs/A/09_calculator.jpg', 'expt_3/resources/sequences_IDs/A/10_satellite_dish.jpg', 'expt_3/resources/sequences_IDs/A/stimuli_info_tab.txt', 'expt_3/resources/sequences/retriever_switch_conditions_expt_3_1.xlsx', 'expt_3/resources/sequences/retriever_switch_conditions_expt_3_2.xlsx', 'expt_3/resources/sequences/retriever_switch_conditions_expt_3_3.xlsx', 'expt_3/resources/sequences/retriever_switch_conditions_expt_3_4.xlsx', 'expt_3/resources/sequences/retriever_switch_conditions_expt_3_5.xlsx', 'expt_3/resources/sequences/retriever_switch_conditions_expt_3_6.xlsx', 'expt_3/resources/sequences/retriever_switch_conditions_expt_3_7.xlsx', 'expt_3/resources/sequences/retriever_switch_conditions_expt_3_8.xlsx', 'expt_3/resources/sequences/retriever_switch_conditions_expt_3_9.xlsx', 'expt_3/resources/sequences/retriever_switch_conditions_expt_3_10.xlsx', 'expt_3/resources/sequences/retriever_switch_conditions_expt_3_11.xlsx', 'expt_3/resources/sequences/retriever_switch_conditions_expt_3_12.xlsx', 'expt_3/resources/sequences/retriever_switch_conditions_expt_3_13.xlsx', 'expt_3/resources/sequences/retriever_switch_conditions_expt_3_14.xlsx', 'expt_3/resources/sequences/retriever_switch_conditions_expt_3_15.xlsx', 'expt_3/resources/sequences/retriever_switch_conditions_expt_3_16.xlsx', 'expt_3/resources/sequences/retriever_switch_conditions_expt_3_17.xlsx', 'expt_3/resources/sequences/retriever_switch_conditions_expt_3_18.xlsx', 'expt_3/resources/sequences/retriever_switch_conditions_expt_3_19.xlsx', 'expt_3/resources/sequences/retriever_switch_conditions_expt_3_20.xlsx', 'expt_3/resources/sequences/retriever_switch_conditions_expt_3_21.xlsx', 'expt_3/resources/sequences/retriever_switch_conditions_expt_3_22.xlsx', 'expt_3/resources/sequences/retriever_switch_conditions_expt_3_23.xlsx', 'expt_3/resources/sequences/retriever_switch_conditions_expt_3_24.xlsx', 'expt_3/resources/sequences/retriever_switch_conditions_expt_3_25.xlsx', 'expt_3/resources/sequences/retriever_switch_conditions_expt_3_26.xlsx', 'expt_3/resources/sequences/retriever_switch_conditions_expt_3_27.xlsx', 'expt_3/resources/sequences/retriever_switch_conditions_expt_3_28.xlsx', 'expt_3/resources/sequences/retriever_switch_conditions_expt_3_29.xlsx', 'expt_3/resources/sequences/retriever_switch_conditions_expt_3_30.xlsx', 'expt_3/resources/sequences/retriever_switch_conditions_expt_3_31.xlsx', 'expt_3/resources/sequences/retriever_switch_conditions_expt_3_32.xlsx', 'expt_3/resources/sequences/retriever_switch_conditions_expt_3_33.xlsx', 'expt_3/resources/sequences/retriever_switch_conditions_expt_3_34.xlsx', 'expt_3/resources/sequences/retriever_switch_conditions_expt_3_35.xlsx', 'expt_3/resources/sequences/retriever_switch_conditions_expt_3_36.xlsx', 'expt_3/resources/sequences/retriever_switch_conditions_expt_3_37.xlsx', 'expt_3/resources/sequences/retriever_switch_conditions_expt_3_38.xlsx', 'expt_3/resources/sequences/retriever_switch_conditions_expt_3_39.xlsx', 'expt_3/resources/sequences/retriever_switch_conditions_expt_3_40.xlsx', 'expt_3/resources/sequences/retriever_switch_conditions_expt_3_41.xlsx', 'expt_3/resources/sequences/retriever_switch_conditions_expt_3_42.xlsx', 'expt_3/resources/sequences/retriever_switch_conditions_expt_3_43.xlsx', 'expt_3/resources/sequences/retriever_switch_conditions_expt_3_44.xlsx', 'expt_3/resources/sequences/retriever_switch_conditions_expt_3_45.xlsx', 'expt_3/resources/sequences/retriever_switch_conditions_expt_3_46.xlsx', 'expt_3/resources/sequences/retriever_switch_conditions_expt_3_47.xlsx', 'expt_3/resources/sequences/retriever_switch_conditions_expt_3_48.xlsx', 'expt_3/resources/sequences/retriever_switch_conditions_expt_3_49.xlsx', 'expt_3/resources/sequences/retriever_switch_conditions_expt_3_50.xlsx', 'expt_3/resources/sequences/retriever_switch_conditions_expt_3_51.xlsx', 'expt_3/resources/sequences/retriever_switch_conditions_expt_3_52.xlsx', 'expt_3/resources/sequences/retriever_switch_conditions_expt_3_53.xlsx', 'expt_3/resources/sequences/retriever_switch_conditions_expt_3_54.xlsx', 'expt_3/resources/sequences/retriever_switch_conditions_expt_3_55.xlsx', 'expt_3/resources/sequences/retriever_switch_conditions_expt_3_56.xlsx', 'expt_3/resources/sequences/retriever_switch_conditions_expt_3_57.xlsx', 'expt_3/resources/sequences/retriever_switch_conditions_expt_3_58.xlsx', 'expt_3/resources/sequences/retriever_switch_conditions_expt_3_59.xlsx', 'expt_3/resources/sequences/retriever_switch_conditions_expt_3_60.xlsx', 'expt_3/resources/sequences/retriever_switch_conditions_expt_3_61.xlsx', 'expt_3/resources/sequences/retriever_switch_conditions_expt_3_62.xlsx', 'expt_3/resources/sequences/retriever_switch_conditions_expt_3_63.xlsx', 'expt_3/resources/sequences/retriever_switch_conditions_expt_3_64.xlsx', 'expt_3/resources/sequences/retriever_switch_conditions_expt_3_65.xlsx', 'expt_3/resources/sequences/retriever_switch_conditions_expt_3_66.xlsx', 'expt_3/resources/sequences/retriever_switch_conditions_expt_3_67.xlsx', 'expt_3/resources/sequences/retriever_switch_conditions_expt_3_68.xlsx', 'expt_3/resources/sequences/retriever_switch_conditions_expt_3_69.xlsx', 'expt_3/resources/sequences/retriever_switch_conditions_expt_3_70.xlsx', 'expt_3/resources/sequences/retriever_switch_conditions_expt_3_71.xlsx', 'expt_3/resources/sequences/retriever_switch_conditions_expt_3_72.xlsx', 'expt_3/resources/sequences/retriever_switch_conditions_expt_3_73.xlsx', 'expt_3/resources/sequences/retriever_switch_conditions_expt_3_74.xlsx', 'expt_3/resources/sequences/retriever_switch_conditions_expt_3_75.xlsx', 'expt_3/resources/sequences/retriever_switch_conditions_expt_3_76.xlsx', 'expt_3/resources/sequences/retriever_switch_conditions_expt_3_77.xlsx', 'expt_3/resources/sequences/retriever_switch_conditions_expt_3_78.xlsx', 'expt_3/resources/sequences/retriever_switch_conditions_expt_3_79.xlsx', 'expt_3/resources/sequences/retriever_switch_conditions_expt_3_80.xlsx', 'expt_3/resources/sequences/retriever_switch_conditions_expt_3_81.xlsx', 'expt_3/resources/sequences/retriever_switch_conditions_expt_3_82.xlsx', 'expt_3/resources/sequences/retriever_switch_conditions_expt_3_83.xlsx', 'expt_3/resources/sequences/retriever_switch_conditions_expt_3_84.xlsx', 'expt_3/resources/sequences/retriever_switch_conditions_expt_3_85.xlsx', 'expt_3/resources/sequences/retriever_switch_conditions_expt_3_86.xlsx', 'expt_3/resources/sequences/retriever_switch_conditions_expt_3_87.xlsx', 'expt_3/resources/sequences/retriever_switch_conditions_expt_3_88.xlsx', 'expt_3/resources/sequences/retriever_switch_conditions_expt_3_89.xlsx', 'expt_3/resources/sequences/retriever_switch_conditions_expt_3_90.xlsx', 'expt_3/resources/sequences/retriever_switch_conditions_expt_3_91.xlsx', 'expt_3/resources/sequences/retriever_switch_conditions_expt_3_92.xlsx', 'expt_3/resources/sequences/retriever_switch_conditions_expt_3_93.xlsx', 'expt_3/resources/sequences/retriever_switch_conditions_expt_3_94.xlsx', 'expt_3/resources/sequences/retriever_switch_conditions_expt_3_95.xlsx', 'expt_3/resources/sequences/retriever_switch_conditions_expt_3_96.xlsx', 'expt_3/resources/sequences/retriever_switch_conditions_expt_3_97.xlsx', 'expt_3/resources/sequences/retriever_switch_conditions_expt_3_98.xlsx', 'expt_3/resources/sequences/retriever_switch_conditions_expt_3_99.xlsx', 'expt_3/resources/sequences/retriever_switch_conditions_expt_3_100.xlsx', 'expt_3/resources/instructions/Slide1.jpg', 'expt_3/resources/instructions/Slide2.jpg', 'expt_3/resources/instructions/Slide3.jpg', 'expt_3/resources/instructions/Slide4.jpeg', 'expt_3/resources/instructions/Slide4.jpg', 'expt_3/resources/instructions/Slide5.jpg', 'expt_3/resources/instructions/Slide6.jpg', 'expt_3/resources/instructions/Slide7.jpg', 'expt_3/resources/instructions/Slide8.jpg', 'expt_3/resources/instructions/Slide9.jpg', 'expt_3/resources/instructions/Slide10.jpg', 'expt_3/resources/instructions/Slide11.jpg', 'expt_3/resources/instructions/Slide12.jpg', 'expt_3/resources/instructions/Slide13.jpg', 'expt_3/resources/instructions/Slide14.jpg', 'expt_3/resources/instructions/Slide15.jpg', 'expt_3/resources/instructions/Slide16.jpg', 'expt_3/resources/instructions/Slide17.jpg', 'expt_3/resources/attentionChecks.xlsx', 'expt_3/resources/conditions_practice.xlsx', 'expt_2/resources/stimuli_practice_decision/01_rabbit.jpg', 'expt_2/resources/stimuli_practice_decision/02_canary.jpg', 'expt_2/resources/stimuli_practice_decision/03_squirrel.jpg', 'expt_2/resources/stimuli_practice_decision/04_beetle.jpg', 'expt_2/resources/stimuli_practice_decision/05_glasses.jpg', 'expt_2/resources/stimuli_practice_decision/06_pullover.jpg', 'expt_2/resources/stimuli_practice_decision/07_sock.jpg', 'expt_2/resources/stimuli_practice_decision/08_handmixer.jpg', 'expt_2/resources/stimuli_practice_decision/stimuli_info_tab.txt', 'expt_2/resources/sequences_IDs/B/01_redfox.jpg', 'expt_2/resources/sequences_IDs/B/02_dolphin.jpg', 'expt_2/resources/sequences_IDs/B/03_giraffe.jpg', 'expt_2/resources/sequences_IDs/B/04_holdfast.jpg', 'expt_2/resources/sequences_IDs/B/05_parrot.jpg', 'expt_2/resources/sequences_IDs/B/06_gloves.jpg', 'expt_2/resources/sequences_IDs/B/07_sport_tshirt.jpg', 'expt_2/resources/sequences_IDs/B/08_slipper.jpg', 'expt_2/resources/sequences_IDs/B/09_phone.jpg', 'expt_2/resources/sequences_IDs/B/10_radio.jpg', 'expt_2/resources/sequences_IDs/B/stimuli_info_tab.txt', 'expt_2/resources/sequences_IDs/A/01_wolf.jpg', 'expt_2/resources/sequences_IDs/A/02_seaturtle.jpg', 'expt_2/resources/sequences_IDs/A/03_camel.jpg', 'expt_2/resources/sequences_IDs/A/04_clownfish.jpg', 'expt_2/resources/sequences_IDs/A/05_peacock.jpg', 'expt_2/resources/sequences_IDs/A/06_scarf.jpg', 'expt_2/resources/sequences_IDs/A/07_dress.jpg', 'expt_2/resources/sequences_IDs/A/08_hat.jpg', 'expt_2/resources/sequences_IDs/A/09_calculator.jpg', 'expt_2/resources/sequences_IDs/A/10_satellite_dish.jpg', 'expt_2/resources/sequences_IDs/A/stimuli_info_tab.txt', 'expt_2/resources/sequences/retriever_switch_conditions_expt_2_1.xlsx', 'expt_2/resources/sequences/retriever_switch_conditions_expt_2_2.xlsx', 'expt_2/resources/sequences/retriever_switch_conditions_expt_2_3.xlsx', 'expt_2/resources/sequences/retriever_switch_conditions_expt_2_4.xlsx', 'expt_2/resources/sequences/retriever_switch_conditions_expt_2_5.xlsx', 'expt_2/resources/sequences/retriever_switch_conditions_expt_2_6.xlsx', 'expt_2/resources/sequences/retriever_switch_conditions_expt_2_7.xlsx', 'expt_2/resources/sequences/retriever_switch_conditions_expt_2_8.xlsx', 'expt_2/resources/sequences/retriever_switch_conditions_expt_2_9.xlsx', 'expt_2/resources/sequences/retriever_switch_conditions_expt_2_10.xlsx', 'expt_2/resources/sequences/retriever_switch_conditions_expt_2_11.xlsx', 'expt_2/resources/sequences/retriever_switch_conditions_expt_2_12.xlsx', 'expt_2/resources/sequences/retriever_switch_conditions_expt_2_13.xlsx', 'expt_2/resources/sequences/retriever_switch_conditions_expt_2_14.xlsx', 'expt_2/resources/sequences/retriever_switch_conditions_expt_2_15.xlsx', 'expt_2/resources/sequences/retriever_switch_conditions_expt_2_16.xlsx', 'expt_2/resources/sequences/retriever_switch_conditions_expt_2_17.xlsx', 'expt_2/resources/sequences/retriever_switch_conditions_expt_2_18.xlsx', 'expt_2/resources/sequences/retriever_switch_conditions_expt_2_19.xlsx', 'expt_2/resources/sequences/retriever_switch_conditions_expt_2_20.xlsx', 'expt_2/resources/sequences/retriever_switch_conditions_expt_2_21.xlsx', 'expt_2/resources/sequences/retriever_switch_conditions_expt_2_22.xlsx', 'expt_2/resources/sequences/retriever_switch_conditions_expt_2_23.xlsx', 'expt_2/resources/sequences/retriever_switch_conditions_expt_2_24.xlsx', 'expt_2/resources/sequences/retriever_switch_conditions_expt_2_25.xlsx', 'expt_2/resources/sequences/retriever_switch_conditions_expt_2_26.xlsx', 'expt_2/resources/sequences/retriever_switch_conditions_expt_2_27.xlsx', 'expt_2/resources/sequences/retriever_switch_conditions_expt_2_28.xlsx', 'expt_2/resources/sequences/retriever_switch_conditions_expt_2_29.xlsx', 'expt_2/resources/sequences/retriever_switch_conditions_expt_2_30.xlsx', 'expt_2/resources/sequences/retriever_switch_conditions_expt_2_31.xlsx', 'expt_2/resources/sequences/retriever_switch_conditions_expt_2_32.xlsx', 'expt_2/resources/sequences/retriever_switch_conditions_expt_2_33.xlsx', 'expt_2/resources/sequences/retriever_switch_conditions_expt_2_34.xlsx', 'expt_2/resources/sequences/retriever_switch_conditions_expt_2_35.xlsx', 'expt_2/resources/sequences/retriever_switch_conditions_expt_2_36.xlsx', 'expt_2/resources/sequences/retriever_switch_conditions_expt_2_37.xlsx', 'expt_2/resources/sequences/retriever_switch_conditions_expt_2_38.xlsx', 'expt_2/resources/sequences/retriever_switch_conditions_expt_2_39.xlsx', 'expt_2/resources/sequences/retriever_switch_conditions_expt_2_40.xlsx', 'expt_2/resources/sequences/retriever_switch_conditions_expt_2_41.xlsx', 'expt_2/resources/sequences/retriever_switch_conditions_expt_2_42.xlsx', 'expt_2/resources/sequences/retriever_switch_conditions_expt_2_43.xlsx', 'expt_2/resources/sequences/retriever_switch_conditions_expt_2_44.xlsx', 'expt_2/resources/sequences/retriever_switch_conditions_expt_2_45.xlsx', 'expt_2/resources/sequences/retriever_switch_conditions_expt_2_46.xlsx', 'expt_2/resources/sequences/retriever_switch_conditions_expt_2_47.xlsx', 'expt_2/resources/sequences/retriever_switch_conditions_expt_2_48.xlsx', 'expt_2/resources/sequences/retriever_switch_conditions_expt_2_49.xlsx', 'expt_2/resources/sequences/retriever_switch_conditions_expt_2_50.xlsx', 'expt_2/resources/sequences/retriever_switch_conditions_expt_2_51.xlsx', 'expt_2/resources/sequences/retriever_switch_conditions_expt_2_52.xlsx', 'expt_2/resources/sequences/retriever_switch_conditions_expt_2_53.xlsx', 'expt_2/resources/sequences/retriever_switch_conditions_expt_2_54.xlsx', 'expt_2/resources/sequences/retriever_switch_conditions_expt_2_55.xlsx', 'expt_2/resources/sequences/retriever_switch_conditions_expt_2_56.xlsx', 'expt_2/resources/sequences/retriever_switch_conditions_expt_2_57.xlsx', 'expt_2/resources/sequences/retriever_switch_conditions_expt_2_58.xlsx', 'expt_2/resources/sequences/retriever_switch_conditions_expt_2_59.xlsx', 'expt_2/resources/sequences/retriever_switch_conditions_expt_2_60.xlsx', 'expt_2/resources/sequences/retriever_switch_conditions_expt_2_61.xlsx', 'expt_2/resources/sequences/retriever_switch_conditions_expt_2_62.xlsx', 'expt_2/resources/sequences/retriever_switch_conditions_expt_2_63.xlsx', 'expt_2/resources/sequences/retriever_switch_conditions_expt_2_64.xlsx', 'expt_2/resources/sequences/retriever_switch_conditions_expt_2_65.xlsx', 'expt_2/resources/sequences/retriever_switch_conditions_expt_2_66.xlsx', 'expt_2/resources/sequences/retriever_switch_conditions_expt_2_67.xlsx', 'expt_2/resources/sequences/retriever_switch_conditions_expt_2_68.xlsx', 'expt_2/resources/sequences/retriever_switch_conditions_expt_2_69.xlsx', 'expt_2/resources/sequences/retriever_switch_conditions_expt_2_70.xlsx', 'expt_2/resources/sequences/retriever_switch_conditions_expt_2_71.xlsx', 'expt_2/resources/sequences/retriever_switch_conditions_expt_2_72.xlsx', 'expt_2/resources/sequences/retriever_switch_conditions_expt_2_73.xlsx', 'expt_2/resources/sequences/retriever_switch_conditions_expt_2_74.xlsx', 'expt_2/resources/sequences/retriever_switch_conditions_expt_2_75.xlsx', 'expt_2/resources/sequences/retriever_switch_conditions_expt_2_76.xlsx', 'expt_2/resources/sequences/retriever_switch_conditions_expt_2_77.xlsx', 'expt_2/resources/sequences/retriever_switch_conditions_expt_2_78.xlsx', 'expt_2/resources/sequences/retriever_switch_conditions_expt_2_79.xlsx', 'expt_2/resources/sequences/retriever_switch_conditions_expt_2_80.xlsx', 'expt_2/resources/sequences/retriever_switch_conditions_expt_2_81.xlsx', 'expt_2/resources/sequences/retriever_switch_conditions_expt_2_82.xlsx', 'expt_2/resources/sequences/retriever_switch_conditions_expt_2_83.xlsx', 'expt_2/resources/sequences/retriever_switch_conditions_expt_2_84.xlsx', 'expt_2/resources/sequences/retriever_switch_conditions_expt_2_85.xlsx', 'expt_2/resources/sequences/retriever_switch_conditions_expt_2_86.xlsx', 'expt_2/resources/sequences/retriever_switch_conditions_expt_2_87.xlsx', 'expt_2/resources/sequences/retriever_switch_conditions_expt_2_88.xlsx', 'expt_2/resources/sequences/retriever_switch_conditions_expt_2_89.xlsx', 'expt_2/resources/sequences/retriever_switch_conditions_expt_2_90.xlsx', 'expt_2/resources/sequences/retriever_switch_conditions_expt_2_91.xlsx', 'expt_2/resources/sequences/retriever_switch_conditions_expt_2_92.xlsx', 'expt_2/resources/sequences/retriever_switch_conditions_expt_2_93.xlsx', 'expt_2/resources/sequences/retriever_switch_conditions_expt_2_94.xlsx', 'expt_2/resources/sequences/retriever_switch_conditions_expt_2_95.xlsx', 'expt_2/resources/sequences/retriever_switch_conditions_expt_2_96.xlsx', 'expt_2/resources/sequences/retriever_switch_conditions_expt_2_97.xlsx', 'expt_2/resources/sequences/retriever_switch_conditions_expt_2_98.xlsx', 'expt_2/resources/sequences/retriever_switch_conditions_expt_2_99.xlsx', 'expt_2/resources/sequences/retriever_switch_conditions_expt_2_100.xlsx', 'expt_2/resources/instructions/Slide1.jpg', 'expt_2/resources/instructions/Slide2.jpg', 'expt_2/resources/instructions/Slide3.jpg', 'expt_2/resources/instructions/Slide4.jpg', 'expt_2/resources/instructions/Slide5.jpg', 'expt_2/resources/instructions/Slide6.jpg', 'expt_2/resources/instructions/Slide7.jpg', 'expt_2/resources/instructions/Slide8.jpg', 'expt_2/resources/instructions/Slide9.jpg', 'expt_2/resources/instructions/Slide10.jpg', 'expt_2/resources/instructions/Slide11.jpg', 'expt_2/resources/instructions/Slide12.jpg', 'expt_2/resources/instructions/Slide13.jpg', 'expt_2/resources/instructions/Slide14.jpg', 'expt_2/resources/instructions/Slide15.jpg', 'expt_2/resources/instructions/Slide16.jpg', 'expt_2/resources/instructions/Slide17.jpg', 'expt_2/resources/instructions/Slide18.jpg', 'expt_2/resources/attentionChecks.xlsx', 'expt_2/resources/conditions_practice.xlsx', 'expt_1/resources/stimuli_practice_decision/01_rabbit.jpg', 'expt_1/resources/stimuli_practice_decision/02_canary.jpg', 'expt_1/resources/stimuli_practice_decision/03_squirrel.jpg', 'expt_1/resources/stimuli_practice_decision/04_beetle.jpg', 'expt_1/resources/stimuli_practice_decision/05_glasses.jpg', 'expt_1/resources/stimuli_practice_decision/06_pullover.jpg', 'expt_1/resources/stimuli_practice_decision/07_sock.jpg', 'expt_1/resources/stimuli_practice_decision/08_handmixer.jpg', 'expt_1/resources/stimuli_practice_decision/stimuli_info_tab.txt', 'expt_1/resources/sequences_IDs/B/01_redfox.jpg', 'expt_1/resources/sequences_IDs/B/02_dolphin.jpg', 'expt_1/resources/sequences_IDs/B/03_giraffe.jpg', 'expt_1/resources/sequences_IDs/B/04_holdfast.jpg', 'expt_1/resources/sequences_IDs/B/05_parrot.jpg', 'expt_1/resources/sequences_IDs/B/06_gloves.jpg', 'expt_1/resources/sequences_IDs/B/07_sport_tshirt.jpg', 'expt_1/resources/sequences_IDs/B/08_slipper.jpg', 'expt_1/resources/sequences_IDs/B/09_phone.jpg', 'expt_1/resources/sequences_IDs/B/10_radio.jpg', 'expt_1/resources/sequences_IDs/B/stimuli_info_tab.txt', 'expt_1/resources/sequences_IDs/A/01_wolf.jpg', 'expt_1/resources/sequences_IDs/A/02_seaturtle.jpg', 'expt_1/resources/sequences_IDs/A/03_camel.jpg', 'expt_1/resources/sequences_IDs/A/04_clownfish.jpg', 'expt_1/resources/sequences_IDs/A/05_peacock.jpg', 'expt_1/resources/sequences_IDs/A/06_scarf.jpg', 'expt_1/resources/sequences_IDs/A/07_dress.jpg', 'expt_1/resources/sequences_IDs/A/08_hat.jpg', 'expt_1/resources/sequences_IDs/A/09_calculator.jpg', 'expt_1/resources/sequences_IDs/A/10_satellite_dish.jpg', 'expt_1/resources/sequences_IDs/A/stimuli_info_tab.txt', 'expt_1/resources/sequences/retriever_switch_conditions_expt_1_1.xlsx', 'expt_1/resources/sequences/retriever_switch_conditions_expt_1_2.xlsx', 'expt_1/resources/sequences/retriever_switch_conditions_expt_1_3.xlsx', 'expt_1/resources/sequences/retriever_switch_conditions_expt_1_4.xlsx', 'expt_1/resources/sequences/retriever_switch_conditions_expt_1_5.xlsx', 'expt_1/resources/sequences/retriever_switch_conditions_expt_1_6.xlsx', 'expt_1/resources/sequences/retriever_switch_conditions_expt_1_7.xlsx', 'expt_1/resources/sequences/retriever_switch_conditions_expt_1_8.xlsx', 'expt_1/resources/sequences/retriever_switch_conditions_expt_1_9.xlsx', 'expt_1/resources/sequences/retriever_switch_conditions_expt_1_10.xlsx', 'expt_1/resources/sequences/retriever_switch_conditions_expt_1_11.xlsx', 'expt_1/resources/sequences/retriever_switch_conditions_expt_1_12.xlsx', 'expt_1/resources/sequences/retriever_switch_conditions_expt_1_13.xlsx', 'expt_1/resources/sequences/retriever_switch_conditions_expt_1_14.xlsx', 'expt_1/resources/sequences/retriever_switch_conditions_expt_1_15.xlsx', 'expt_1/resources/sequences/retriever_switch_conditions_expt_1_16.xlsx', 'expt_1/resources/sequences/retriever_switch_conditions_expt_1_17.xlsx', 'expt_1/resources/sequences/retriever_switch_conditions_expt_1_18.xlsx', 'expt_1/resources/sequences/retriever_switch_conditions_expt_1_19.xlsx', 'expt_1/resources/sequences/retriever_switch_conditions_expt_1_20.xlsx', 'expt_1/resources/sequences/retriever_switch_conditions_expt_1_21.xlsx', 'expt_1/resources/sequences/retriever_switch_conditions_expt_1_22.xlsx', 'expt_1/resources/sequences/retriever_switch_conditions_expt_1_23.xlsx', 'expt_1/resources/sequences/retriever_switch_conditions_expt_1_24.xlsx', 'expt_1/resources/sequences/retriever_switch_conditions_expt_1_25.xlsx', 'expt_1/resources/sequences/retriever_switch_conditions_expt_1_26.xlsx', 'expt_1/resources/sequences/retriever_switch_conditions_expt_1_27.xlsx', 'expt_1/resources/sequences/retriever_switch_conditions_expt_1_28.xlsx', 'expt_1/resources/sequences/retriever_switch_conditions_expt_1_29.xlsx', 'expt_1/resources/sequences/retriever_switch_conditions_expt_1_30.xlsx', 'expt_1/resources/sequences/retriever_switch_conditions_expt_1_31.xlsx', 'expt_1/resources/sequences/retriever_switch_conditions_expt_1_32.xlsx', 'expt_1/resources/sequences/retriever_switch_conditions_expt_1_33.xlsx', 'expt_1/resources/sequences/retriever_switch_conditions_expt_1_34.xlsx', 'expt_1/resources/sequences/retriever_switch_conditions_expt_1_35.xlsx', 'expt_1/resources/sequences/retriever_switch_conditions_expt_1_36.xlsx', 'expt_1/resources/sequences/retriever_switch_conditions_expt_1_37.xlsx', 'expt_1/resources/sequences/retriever_switch_conditions_expt_1_38.xlsx', 'expt_1/resources/sequences/retriever_switch_conditions_expt_1_39.xlsx', 'expt_1/resources/sequences/retriever_switch_conditions_expt_1_40.xlsx', 'expt_1/resources/sequences/retriever_switch_conditions_expt_1_41.xlsx', 'expt_1/resources/sequences/retriever_switch_conditions_expt_1_42.xlsx', 'expt_1/resources/sequences/retriever_switch_conditions_expt_1_43.xlsx', 'expt_1/resources/sequences/retriever_switch_conditions_expt_1_44.xlsx', 'expt_1/resources/sequences/retriever_switch_conditions_expt_1_45.xlsx', 'expt_1/resources/sequences/retriever_switch_conditions_expt_1_46.xlsx', 'expt_1/resources/sequences/retriever_switch_conditions_expt_1_47.xlsx', 'expt_1/resources/sequences/retriever_switch_conditions_expt_1_48.xlsx', 'expt_1/resources/sequences/retriever_switch_conditions_expt_1_49.xlsx', 'expt_1/resources/sequences/retriever_switch_conditions_expt_1_50.xlsx', 'expt_1/resources/sequences/retriever_switch_conditions_expt_1_51.xlsx', 'expt_1/resources/sequences/retriever_switch_conditions_expt_1_52.xlsx', 'expt_1/resources/sequences/retriever_switch_conditions_expt_1_53.xlsx', 'expt_1/resources/sequences/retriever_switch_conditions_expt_1_54.xlsx', 'expt_1/resources/sequences/retriever_switch_conditions_expt_1_55.xlsx', 'expt_1/resources/sequences/retriever_switch_conditions_expt_1_56.xlsx', 'expt_1/resources/sequences/retriever_switch_conditions_expt_1_57.xlsx', 'expt_1/resources/sequences/retriever_switch_conditions_expt_1_58.xlsx', 'expt_1/resources/sequences/retriever_switch_conditions_expt_1_59.xlsx', 'expt_1/resources/sequences/retriever_switch_conditions_expt_1_60.xlsx', 'expt_1/resources/sequences/retriever_switch_conditions_expt_1_61.xlsx', 'expt_1/resources/sequences/retriever_switch_conditions_expt_1_62.xlsx', 'expt_1/resources/sequences/retriever_switch_conditions_expt_1_63.xlsx', 'expt_1/resources/sequences/retriever_switch_conditions_expt_1_64.xlsx', 'expt_1/resources/sequences/retriever_switch_conditions_expt_1_65.xlsx', 'expt_1/resources/sequences/retriever_switch_conditions_expt_1_66.xlsx', 'expt_1/resources/sequences/retriever_switch_conditions_expt_1_67.xlsx', 'expt_1/resources/sequences/retriever_switch_conditions_expt_1_68.xlsx', 'expt_1/resources/sequences/retriever_switch_conditions_expt_1_69.xlsx', 'expt_1/resources/sequences/retriever_switch_conditions_expt_1_70.xlsx', 'expt_1/resources/sequences/retriever_switch_conditions_expt_1_71.xlsx', 'expt_1/resources/sequences/retriever_switch_conditions_expt_1_72.xlsx', 'expt_1/resources/sequences/retriever_switch_conditions_expt_1_73.xlsx', 'expt_1/resources/sequences/retriever_switch_conditions_expt_1_74.xlsx', 'expt_1/resources/sequences/retriever_switch_conditions_expt_1_75.xlsx', 'expt_1/resources/sequences/retriever_switch_conditions_expt_1_76.xlsx', 'expt_1/resources/sequences/retriever_switch_conditions_expt_1_77.xlsx', 'expt_1/resources/sequences/retriever_switch_conditions_expt_1_78.xlsx', 'expt_1/resources/sequences/retriever_switch_conditions_expt_1_79.xlsx', 'expt_1/resources/sequences/retriever_switch_conditions_expt_1_80.xlsx', 'expt_1/resources/sequences/retriever_switch_conditions_expt_1_81.xlsx', 'expt_1/resources/sequences/retriever_switch_conditions_expt_1_82.xlsx', 'expt_1/resources/sequences/retriever_switch_conditions_expt_1_83.xlsx', 'expt_1/resources/sequences/retriever_switch_conditions_expt_1_84.xlsx', 'expt_1/resources/sequences/retriever_switch_conditions_expt_1_85.xlsx', 'expt_1/resources/sequences/retriever_switch_conditions_expt_1_86.xlsx', 'expt_1/resources/sequences/retriever_switch_conditions_expt_1_87.xlsx', 'expt_1/resources/sequences/retriever_switch_conditions_expt_1_88.xlsx', 'expt_1/resources/sequences/retriever_switch_conditions_expt_1_89.xlsx', 'expt_1/resources/sequences/retriever_switch_conditions_expt_1_90.xlsx', 'expt_1/resources/sequences/retriever_switch_conditions_expt_1_91.xlsx', 'expt_1/resources/sequences/retriever_switch_conditions_expt_1_92.xlsx', 'expt_1/resources/sequences/retriever_switch_conditions_expt_1_93.xlsx', 'expt_1/resources/sequences/retriever_switch_conditions_expt_1_94.xlsx', 'expt_1/resources/sequences/retriever_switch_conditions_expt_1_95.xlsx', 'expt_1/resources/sequences/retriever_switch_conditions_expt_1_96.xlsx', 'expt_1/resources/sequences/retriever_switch_conditions_expt_1_97.xlsx', 'expt_1/resources/sequences/retriever_switch_conditions_expt_1_98.xlsx', 'expt_1/resources/sequences/retriever_switch_conditions_expt_1_99.xlsx', 'expt_1/resources/sequences/retriever_switch_conditions_expt_1_100.xlsx', 'expt_1/resources/instructions/Slide1.jpg', 'expt_1/resources/instructions/Slide2.jpg', 'expt_1/resources/instructions/Slide3.jpg', 'expt_1/resources/instructions/Slide4.jpg', 'expt_1/resources/instructions/Slide5.jpg', 'expt_1/resources/instructions/Slide6.jpg', 'expt_1/resources/instructions/Slide7.jpg', 'expt_1/resources/instructions/Slide8.jpg', 'expt_1/resources/instructions/Slide9.jpg', 'expt_1/resources/instructions/Slide10.jpg', 'expt_1/resources/instructions/Slide11.jpg', 'expt_1/resources/instructions/Slide12.jpg', 'expt_1/resources/instructions/Slide13.jpg', 'expt_1/resources/instructions/Slide14.jpg', 'expt_1/resources/instructions/Slide15.jpg', 'expt_1/resources/instructions/Slide16.jpg', 'expt_1/resources/instructions/Slide17.jpg', 'expt_1/resources/instructions/Slide18.jpg', 'expt_1/resources/instructions/Slide19.jpg', 'expt_1/resources/attentionChecks.xlsx', 'expt_1/resources/conditions_practice.xlsx']" valType="list" updates="None" name="Resources"/>
    <Param val="True" valType="bool" updates="None" name="Save csv file"/>
    <Param val="False" valType="bool" updates="None" name="Save excel file"/>
    <Param val="False" valType="bool" updates="None" name="Save hdf5 file"/>
    <Param val="True" valType="bool" updates="None" name="Save log file"/>
    <Param val="True" valType="bool" updates="None" name="Save psydat file"/>
    <Param val="True" valType="bool" updates="None" name="Save wide csv file"/>
    <Param val="1" valType="num" updates="None" name="Screen"/>
    <Param val="True" valType="bool" updates="None" name="Show info dlg"/>
    <Param val="False" valType="bool" updates="None" name="Show mouse"/>
    <Param val="height" valType="str" updates="None" name="Units"/>
    <Param val="" valType="str" updates="None" name="Use version"/>
    <Param val="[1512, 982]" valType="code" updates="None" name="Window size (pixels)"/>
    <Param val="avg" valType="str" updates="None" name="blendMode"/>
    <Param val="$[1.000,1.000,1.000]" valType="str" updates="None" name="color"/>
    <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
    <Param val="100.1.1.1" valType="str" updates="None" name="elAddress"/>
    <Param val="FILTER_LEVEL_2" valType="str" updates="None" name="elDataFiltering"/>
    <Param val="FILTER_LEVEL_OFF" valType="str" updates="None" name="elLiveFiltering"/>
    <Param val="EYELINK 1000 DESKTOP" valType="str" updates="None" name="elModel"/>
    <Param val="ELLIPSE_FIT" valType="str" updates="None" name="elPupilAlgorithm"/>
    <Param val="PUPIL_AREA" valType="str" updates="None" name="elPupilMeasure"/>
    <Param val="1000" valType="num" updates="None" name="elSampleRate"/>
    <Param val="False" valType="bool" updates="None" name="elSimMode"/>
    <Param val="RIGHT_EYE" valType="str" updates="None" name="elTrackEyes"/>
    <Param val="PUPIL_CR_TRACKING" valType="str" updates="None" name="elTrackingMode"/>
    <Param val="Retriever" valType="str" updates="None" name="expName"/>
    <Param val="on Sync" valType="str" updates="None" name="exportHTML"/>
    <Param val="None" valType="str" updates="None" name="eyetracker"/>
    <Param val="127.0.0.1" valType="str" updates="None" name="gpAddress"/>
    <Param val="4242" valType="num" updates="None" name="gpPort"/>
    <Param val="PsychToolbox" valType="str" updates="None" name="keyboardBackend"/>
    <Param val="exp" valType="code" updates="None" name="logging level"/>
    <Param val="('MIDDLE_BUTTON',)" valType="list" updates="None" name="mgBlink"/>
    <Param val="CONTINUOUS" valType="str" updates="None" name="mgMove"/>
    <Param val="0.5" valType="num" updates="None" name="mgSaccade"/>
    <Param val="0.6" valType="num" updates="None" name="plConfidenceThreshold"/>
    <Param val="True" valType="bool" updates="None" name="plPupilCaptureRecordingEnabled"/>
    <Param val="" valType="str" updates="None" name="plPupilCaptureRecordingLocation"/>
    <Param val="127.0.0.1" valType="str" updates="None" name="plPupilRemoteAddress"/>
    <Param val="50020" valType="num" updates="None" name="plPupilRemotePort"/>
    <Param val="1000" valType="num" updates="None" name="plPupilRemoteTimeoutMs"/>
    <Param val="False" valType="bool" updates="None" name="plPupillometryOnly"/>
    <Param val="psychopy_iohub_surface" valType="str" updates="None" name="plSurfaceName"/>
    <Param val="" valType="str" updates="None" name="tbLicenseFile"/>
    <Param val="" valType="str" updates="None" name="tbModel"/>
    <Param val="60" valType="num" updates="None" name="tbSampleRate"/>
    <Param val="" valType="str" updates="None" name="tbSerialNo"/>
  </Settings>
  <Routines>
    <Routine name="trial">
      <ImageComponent name="imageP1">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="$P1Loc" valType="str" updates="set every repeat" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="None" valType="str" updates="constant" name="mask"/>
        <Param val="imageP1" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(-250, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="(200, 200)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="2.5" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="code" updates="constant" name="texture resolution"/>
        <Param val="pix" valType="str" updates="None" name="units"/>
      </ImageComponent>
      <ImageComponent name="imageP2">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="$P2Loc" valType="str" updates="set every repeat" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="None" valType="str" updates="constant" name="mask"/>
        <Param val="imageP2" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(250, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="(200, 200)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="2.5" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="code" updates="constant" name="texture resolution"/>
        <Param val="pix" valType="str" updates="None" name="units"/>
      </ImageComponent>
      <KeyboardComponent name="key_resp">
        <Param val="'left','right'" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="$CorrectAns" valType="str" updates="constant" name="correctAns"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="key_resp" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="2.5" valType="code" updates="constant" name="stopVal"/>
        <Param val="first key" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
      <CodeComponent name="Feedb">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="# Message that will be updated with specific feedback&amp;#10;msg = 'Feedback msg after trial'&amp;#10;&amp;#10;# Counter for the trials &amp;#10;ntrial = 0 &amp;#10;trialReal = []&amp;#10;&amp;#10;# Coding the feedback message - add to output file&amp;#10;acc_real = []&amp;#10;acc_feedback = []&amp;#10;&amp;#10;# Counter for hits per block for feedback and real accuracy&amp;#10;hits_per_block = 0&amp;#10;hits_per_block_real = 0&amp;#10;&amp;#10;# Counter for the bonus&amp;#10;bonus_accuracies = []" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="msg = &quot;Feedback msg after trial&quot;;&amp;#10;ntrial = 0;&amp;#10;trialReal = [];&amp;#10;acc_real = [];&amp;#10;acc_feedback = [];&amp;#10;hits_per_block = 0;&amp;#10;hits_per_block_real = 0;&amp;#10;bonus_accuracies = [];&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="ntrial += 1;&amp;#10;trialReal = ntrial;&amp;#10;psychoJS.experiment.addData(&quot;trialNumber&quot;, trialReal);&amp;#10;crossDisappear = 1;&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="# Counter for which trial we are in right now&amp;#10;ntrial += 1&amp;#10;trialReal = ntrial&amp;#10;thisExp.addData('trialNumber', trialReal)&amp;#10;crossDisappear = 1&amp;#10;#mainStart = core.monotonicClock.getTime()" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Both" valType="str" updates="None" name="Code Type"/>
        <Param val="if key_resp.keys == 'left' or key_resp.keys == 'right': &amp;#10;    crossDisappear = 0&amp;#10;" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="if (((key_resp.keys === &quot;left&quot;) || (key_resp.keys === &quot;right&quot;))) {&amp;#10;    crossDisappear = 0;&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="if ((key_resp.keys === &quot;left&quot;)) {&amp;#10;    valueDiff = (ValueP1 - ValueP2);&amp;#10;    psychoJS.experiment.addData(&quot;item_chosen_name&quot;, P1name);&amp;#10;    psychoJS.experiment.addData(&quot;item_chosen_value&quot;, ValueP1);&amp;#10;    psychoJS.experiment.addData(&quot;item_chosen_ID&quot;, P1id);&amp;#10;} else {&amp;#10;    if ((key_resp.keys === &quot;right&quot;)) {&amp;#10;        valueDiff = (ValueP2 - ValueP1);&amp;#10;        psychoJS.experiment.addData(&quot;item_chosen_name&quot;, P2name);&amp;#10;        psychoJS.experiment.addData(&quot;item_chosen_value&quot;, ValueP2);&amp;#10;        psychoJS.experiment.addData(&quot;item_chosen_ID&quot;, P2id);&amp;#10;    } else {&amp;#10;        if ((key_resp.keys === undefined)) {&amp;#10;            valueDiff = undefined;&amp;#10;            psychoJS.experiment.addData(&quot;item_chosen_name&quot;, undefined);&amp;#10;            psychoJS.experiment.addData(&quot;item_chosen_value&quot;, undefined);&amp;#10;            psychoJS.experiment.addData(&quot;item_chosen_ID&quot;, undefined);&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;value_dist = (ValueP1 - ValueP2);&amp;#10;value_dist_abs = Math.abs(value_dist);&amp;#10;if ((key_resp.keys === undefined)) {&amp;#10;    msg = &quot;TRY TO RESPOND FASTER&quot;;&amp;#10;    acc_feedback = 2;&amp;#10;    acc_real = 2;&amp;#10;    durationBlank = 0.5;&amp;#10;} else {&amp;#10;    if ((Feedback_On === 0)) {&amp;#10;        msg = &quot;&quot;;&amp;#10;        durationBlank = 0.0;&amp;#10;        acc_feedback = 3;&amp;#10;    } else {&amp;#10;        if ((Feedback_On === 1)) {&amp;#10;            durationBlank = 0.5;&amp;#10;            if ((InverseFb === 1)) {&amp;#10;                if ((valueDiff &gt; 0)) {&amp;#10;                    msg = &quot;Incorrect&quot;;&amp;#10;                    acc_feedback = 0;&amp;#10;                } else {&amp;#10;                    if ((valueDiff &lt; 0)) {&amp;#10;                        msg = &quot;Correct&quot;;&amp;#10;                        acc_feedback = 1;&amp;#10;                    }&amp;#10;                }&amp;#10;            } else {&amp;#10;                if ((InverseFb === 0)) {&amp;#10;                    if ((valueDiff &gt; 0)) {&amp;#10;                        msg = &quot;Correct&quot;;&amp;#10;                        acc_feedback = 1;&amp;#10;                    } else {&amp;#10;                        if ((valueDiff &lt; 0)) {&amp;#10;                            msg = &quot;Incorrect&quot;;&amp;#10;                            acc_feedback = 0;&amp;#10;                        }&amp;#10;                    }&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;if ((valueDiff === undefined)) {&amp;#10;    acc_real = 2;&amp;#10;} else {&amp;#10;    if ((((valueDiff &gt; 0) &amp;&amp; (InverseFb === 0)) || ((valueDiff &lt; 0) &amp;&amp; (InverseFb === 1)))) {&amp;#10;        acc_real = 1;&amp;#10;        hits_per_block_real = (hits_per_block_real + 1);&amp;#10;    } else {&amp;#10;        if ((((valueDiff &gt; 0) &amp;&amp; (InverseFb === 1)) || ((valueDiff &lt; 0) &amp;&amp; (InverseFb === 0)))) {&amp;#10;            acc_real = 0;&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;psychoJS.experiment.addData(&quot;diff_chosen_minus_reject&quot;, valueDiff);&amp;#10;psychoJS.experiment.addData(&quot;acc_real&quot;, acc_real);&amp;#10;psychoJS.experiment.addData(&quot;acc_feedback&quot;, acc_feedback);&amp;#10;psychoJS.experiment.addData(&quot;expt_n&quot;, expt_n);&amp;#10;&amp;#10;bonus_accuracies.push(acc_real);&amp;#10;" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="# Catch responses&amp;#10;if key_resp.keys == 'left': &amp;#10;    valueDiff = ValueP1 - ValueP2&amp;#10;    thisExp.addData('item_chosen_name', P1name)&amp;#10;    thisExp.addData('item_chosen_value', ValueP1)&amp;#10;    thisExp.addData('item_chosen_ID', P1id)&amp;#10;elif key_resp.keys == 'right':&amp;#10;    valueDiff = ValueP2 - ValueP1&amp;#10;    thisExp.addData('item_chosen_name', P2name)&amp;#10;    thisExp.addData('item_chosen_value', ValueP2)&amp;#10;    thisExp.addData('item_chosen_ID', P2id)&amp;#10;elif key_resp.keys == None:&amp;#10;    valueDiff = None&amp;#10;    thisExp.addData('item_chosen_name', None)&amp;#10;    thisExp.addData('item_chosen_value', None)&amp;#10;    thisExp.addData('item_chosen_ID', None)&amp;#10;    &amp;#10;# Calculating if items are neighbors or not &amp;#10;&amp;#10;value_dist = ValueP1 - ValueP2&amp;#10;value_dist_abs = abs(value_dist) &amp;#10;&amp;#10;# Preparing feedback messages&amp;#10;        &amp;#10;if key_resp.keys == None: &amp;#10;    msg = 'TRY TO RESPOND FASTER'&amp;#10;    acc_feedback = 2&amp;#10;    acc_real = 2&amp;#10;    durationBlank = 0.5&amp;#10;elif Feedback_On == 0:&amp;#10;    msg = ''&amp;#10;    durationBlank = 0.0&amp;#10;    acc_feedback = 3&amp;#10;elif Feedback_On == 1:&amp;#10;    durationBlank = 0.5&amp;#10;    if InverseFb == 1:&amp;#10;        if valueDiff &gt; 0:&amp;#10;            msg = 'Incorrect'&amp;#10;            acc_feedback = 0&amp;#10;        elif valueDiff &lt; 0:&amp;#10;            msg = 'Correct'&amp;#10;            acc_feedback = 1 &amp;#10;    elif InverseFb == 0:&amp;#10;        if valueDiff &gt; 0:&amp;#10;            msg = 'Correct'&amp;#10;            acc_feedback = 1&amp;#10;        elif valueDiff &lt; 0:&amp;#10;            msg = 'Incorrect'&amp;#10;            acc_feedback = 0&amp;#10;&amp;#10;# Loop for saving the real feedback and hits&amp;#10;if valueDiff is None: &amp;#10;    acc_real = 2&amp;#10;elif (valueDiff &gt; 0 and InverseFb == 0) or (valueDiff &lt; 0 and InverseFb == 1):&amp;#10;    acc_real = 1&amp;#10;    hits_per_block_real = hits_per_block_real + 1&amp;#10;elif (valueDiff &gt; 0 and InverseFb == 1) or (valueDiff &lt; 0 and InverseFb == 0):&amp;#10;    acc_real = 0 &amp;#10;    &amp;#10;# Add data to output file&amp;#10;thisExp.addData('diff_chosen_minus_reject', valueDiff)&amp;#10;thisExp.addData('acc_real', acc_real)&amp;#10;thisExp.addData('acc_feedback', acc_feedback)&amp;#10;thisExp.addData('expt_n', expt_n)&amp;#10;&amp;#10;# Add acc from this trial to an array for later&amp;#10;bonus_accuracies.append(acc_real)" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="Feedb" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <PolygonComponent name="cross_objects">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="$[-1.000,-1.000,-1.000]" valType="str" updates="constant" name="fillColor"/>
        <Param val="rgb" valType="str" updates="constant" name="fillColorSpace"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="$[1,1,1]" valType="str" updates="constant" name="lineColor"/>
        <Param val="rgb" valType="str" updates="constant" name="lineColorSpace"/>
        <Param val="1" valType="code" updates="constant" name="lineWidth"/>
        <Param val="4" valType="int" updates="constant" name="nVertices"/>
        <Param val="cross_objects" valType="code" updates="None" name="name"/>
        <Param val="crossDisappear" valType="code" updates="set every frame" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="cross" valType="str" updates="constant" name="shape"/>
        <Param val="(20, 20)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="2.5" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="pix" valType="str" updates="None" name="units"/>
        <Param val="" valType="list" updates="constant" name="vertices"/>
      </PolygonComponent>
    </Routine>
    <Routine name="fixation_2">
      <PolygonComponent name="fixcross">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="$[-1.000,-1.000,-1.000]" valType="str" updates="constant" name="fillColor"/>
        <Param val="rgb" valType="str" updates="constant" name="fillColorSpace"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="$[1,1,1]" valType="str" updates="constant" name="lineColor"/>
        <Param val="rgb" valType="str" updates="constant" name="lineColorSpace"/>
        <Param val="1" valType="code" updates="constant" name="lineWidth"/>
        <Param val="4" valType="int" updates="constant" name="nVertices"/>
        <Param val="fixcross" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="cross" valType="str" updates="constant" name="shape"/>
        <Param val="(20, 20)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="frame N" valType="str" updates="None" name="startType"/>
        <Param val="0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="0.5" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="pix" valType="str" updates="None" name="units"/>
        <Param val="" valType="list" updates="constant" name="vertices"/>
      </PolygonComponent>
      <CodeComponent name="fixcross_prac_duration">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="/* Syntax Error: Fix Python code */" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="# Jitter the timing of fixation cross 0.5 to 1.5 seconds&amp;#10;&amp;#10;#jitter = 30 + randint(0, 60)" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="// Store onset of the fix cross in practice to the output file&amp;#10;psychoJS.experiment.addData('fix_onset', routineStart + fixcross.tStart);&amp;#10;" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="fixcross_prac_duration" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
    <Routine name="feedback">
      <TextComponent name="Feedback">
        <Param val="black" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="" valType="str" updates="constant" name="flip"/>
        <Param val="Sans Serif" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="code" updates="constant" name="letterHeight"/>
        <Param val="Feedback" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="0.5" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="$msg" valType="str" updates="set every repeat" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <CodeComponent name="OnsetFeedbMain">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="// Store time when the feedback routine is starting &amp;#10;startFeedbMain = globalClock.getTime();" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Both" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="// Add onset of feedback message to output file&amp;#10;psychoJS.experiment.addData('feedb_onset', startFeedbMain + Feedback.tStart);" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="OnsetFeedbMain" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <TextComponent name="blankScreen2">
        <Param val="white" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="" valType="str" updates="constant" name="flip"/>
        <Param val="Calibri" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.1" valType="code" updates="constant" name="letterHeight"/>
        <Param val="blankScreen2" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.6" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="$durationBlank" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="Any text&amp;#10;&amp;#10;including line breaks" valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="constant" name="wrapWidth"/>
      </TextComponent>
    </Routine>
    <Routine name="BlockFeedback">
      <CodeComponent name="fbBlock">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="# Message will be updated every block&amp;#10;msgBlock = 'fb after Block'" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="msgBlock = &quot;fb after Block&quot;;&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="// Calculate accuracy in the block and in attention checks&amp;#10;previous_block_acc = (Number.parseFloat(hits_per_block_real) / (ntrial));&amp;#10;check_AC_acc = (hits_in_attention2 / 8);&amp;#10;&amp;#10;&amp;#10;&amp;#10;// Present messages depending on percentage of correct answers&amp;#10;if ((previous_block_acc &gt;= 0.8)) {&amp;#10;    msgBlock = &quot;Amazing, your accuracy in the block was really high!\nRemember, the number of correct trials will determine the chance to get the bonus payment. [Press space bar to continue.]&quot;;&amp;#10;} else {&amp;#10;    if (((previous_block_acc &lt; 0.8) &amp;&amp; (previous_block_acc &gt;= 0.6))) {&amp;#10;        msgBlock = &quot;Your accuracy in the block was great! You are doing an excellent job!\nRemember, the number of correct trials will determine the chance to get the bonus payment. [Press space bar to continue.]&quot;;&amp;#10;    } else {&amp;#10;        if (((previous_block_acc &lt; 0.6) &amp;&amp; (previous_block_acc &gt;= 0.5))) {&amp;#10;            msgBlock = &quot;Your accuracy in the block was good. However, there is still room for improvement!\nRemember, the number of correct trials will determine the chance to get the bonus payment. [Press space bar to continue.]&quot;;&amp;#10;        } else {&amp;#10;            if ((previous_block_acc &lt; 0.5)) {&amp;#10;                msgBlock = &quot;Your accuracy in the block was a bit low. \nDon't give up! You will surely improve it.\nRemember, the number of correct trials will determine the chance to get the bonus payment. [Press space bar to continue.]&quot;;&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="# Calculating accuracy in the block&amp;#10;previous_block_acc = float(hits_per_block_real)/ntrial&amp;#10;&amp;#10;&amp;#10;# Present message depending on percentage of correct answers&amp;#10;if previous_block_acc &gt;= 0.80: &amp;#10;    msgBlock = 'Amazing, your accuracy in the block was really high!\nRemember, the number of correct trials will determine the chance to get the bonus payment.\nPress SPACE to continue.'&amp;#10;elif previous_block_acc &lt; 0.80 and previous_block_acc &gt;= 0.60: &amp;#10;    msgBlock = 'Your accuracy in the block was great! You are doing an excellent job!\nRemember, the number of correct trials will determine the chance to get the bonus payment.\nPress SPACE to continue.' &amp;#10;elif previous_block_acc &lt; 0.60 and previous_block_acc &gt;= 0.50: &amp;#10;    msgBlock = 'Your accuracy in the block was good. However, there is still room for improvement!\nRemember, the number of correct trials will determine the chance to get the bonus payment.\nPress SPACE to continue.'&amp;#10;elif previous_block_acc &lt;= 0.50: &amp;#10;    msgBlock = 'Your accuracy in the block was a bit low. \nDon\'t give up! You will surely improve it.\nRemember, the number of correct trials will determine the chance to get the bonus payment.\nPress SPACE to continue.'&amp;#10;    &amp;#10;" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Both" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="fbBlock" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <TextComponent name="feedbBlocks">
        <Param val="black" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="" valType="str" updates="constant" name="flip"/>
        <Param val="Sans Serif" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="code" updates="constant" name="letterHeight"/>
        <Param val="feedbBlocks" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="$msgBlock" valType="str" updates="set every repeat" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <KeyboardComponent name="keynextBlock">
        <Param val="'space'" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="keynextBlock" valType="code" updates="None" name="name"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="nothing" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="LoopControl_2">
      <CodeComponent name="LoopContr">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="# Counter for the blocks&amp;#10;thisBlock = 0&amp;#10;numberACresults = 0&amp;#10;# Message shown before each block, to be updated&amp;#10;msgBlockNumber = 'which block we say we starting'&amp;#10;&amp;#10;main_task_blocks = ((&quot;expt_&quot; + str(expt_n) + &quot;/resources/sequences/retriever_switch_conditions_expt_&quot; + str(expt_n) + &quot;_&quot; + str(expInfo[&quot;participant&quot;])) + &quot;.xlsx&quot;)" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="thisBlock = 0;&amp;#10;numberACresults = 0;&amp;#10;msgBlockNumber = &quot;which block we say we starting&quot;;&amp;#10;main_task_blocks = ((((((&quot;expt_&quot; + expt_n.toString()) + &quot;/resources/sequences/retriever_switch_conditions_expt_&quot;) + expt_n.toString()) + &quot;_&quot;) + expInfo[&quot;participant&quot;].toString()) + &quot;.xlsx&quot;);&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="thisBlock += 1;&amp;#10;if ((expt_n === 1)) {&amp;#10;    if ((thisBlock === 1)) {&amp;#10;        MyIndicesMain = &quot;0:70&quot;;&amp;#10;    } else {&amp;#10;        if ((thisBlock === 2)) {&amp;#10;            MyIndicesMain = &quot;70:140&quot;;&amp;#10;        } else {&amp;#10;            if ((thisBlock === 3)) {&amp;#10;                MyIndicesMain = &quot;140:210&quot;;&amp;#10;            } else {&amp;#10;                if ((thisBlock === 4)) {&amp;#10;                    MyIndicesMain = &quot;210:282&quot;;&amp;#10;                } else {&amp;#10;                    if ((thisBlock === 5)) {&amp;#10;                        MyIndicesMain = &quot;282:354&quot;;&amp;#10;                    } else {&amp;#10;                        if ((thisBlock === 6)) {&amp;#10;                            MyIndicesMain = &quot;354:426&quot;;&amp;#10;                        }&amp;#10;                    }&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;} else {&amp;#10;    if ((expt_n === 2)) {&amp;#10;        if ((thisBlock === 1)) {&amp;#10;            MyIndicesMain = &quot;0:54&quot;;&amp;#10;        } else {&amp;#10;            if ((thisBlock === 2)) {&amp;#10;                MyIndicesMain = &quot;54:108&quot;;&amp;#10;            } else {&amp;#10;                if ((thisBlock === 3)) {&amp;#10;                    MyIndicesMain = &quot;108:162&quot;;&amp;#10;                } else {&amp;#10;                    if ((thisBlock === 4)) {&amp;#10;                        MyIndicesMain = &quot;162:234&quot;;&amp;#10;                    } else {&amp;#10;                        if ((thisBlock === 5)) {&amp;#10;                            MyIndicesMain = &quot;234:306&quot;;&amp;#10;                        } else {&amp;#10;                            if ((thisBlock === 6)) {&amp;#10;                                MyIndicesMain = &quot;306:378&quot;;&amp;#10;                            }&amp;#10;                        }&amp;#10;                    }&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;    } else {&amp;#10;        if ((expt_n === 3)) {&amp;#10;            if ((thisBlock === 1)) {&amp;#10;                MyIndicesMain = &quot;0:54&quot;;&amp;#10;            } else {&amp;#10;                if ((thisBlock === 2)) {&amp;#10;                    MyIndicesMain = &quot;54:108&quot;;&amp;#10;                } else {&amp;#10;                    if ((thisBlock === 3)) {&amp;#10;                        MyIndicesMain = &quot;108:162&quot;;&amp;#10;                    } else {&amp;#10;                        if ((thisBlock === 4)) {&amp;#10;                            MyIndicesMain = &quot;162:232&quot;;&amp;#10;                        } else {&amp;#10;                            if ((thisBlock === 5)) {&amp;#10;                                MyIndicesMain = &quot;232:302&quot;;&amp;#10;                            } else {&amp;#10;                                if ((thisBlock === 6)) {&amp;#10;                                    MyIndicesMain = &quot;302:372&quot;;&amp;#10;                                }&amp;#10;                            }&amp;#10;                        }&amp;#10;                    }&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;msgBlockNumber = ((&quot;You will start block &quot; + thisBlock.toString()) + &quot; out of 6. \nRemember that both accuracy and speed matter. \n[Press space bar to begin.]&quot;);&amp;#10;if ((thisBlock === 3)) {&amp;#10;    uroInstructions = 1;&amp;#10;    repsAC = 1;&amp;#10;    numberACresults = 1;&amp;#10;} else {&amp;#10;    uroInstructions = 0;&amp;#10;    repsAC = 0;&amp;#10;    numberACresults = 0;&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="# First time we enter the loop, we are in block 1&amp;#10;thisBlock +=1&amp;#10;&amp;#10;# A slice between two specific rows - trials for the block&amp;#10;#myIndices = slice(startItem, endItem+1)&amp;#10;if expt_n == 1:&amp;#10;    if thisBlock == 1:&amp;#10;        MyIndicesMain = &quot;0:70&quot;&amp;#10;    elif thisBlock == 2: &amp;#10;        MyIndicesMain = &quot;70:140&quot;&amp;#10;    elif thisBlock == 3:&amp;#10;        MyIndicesMain = &quot;140:210&quot;&amp;#10;    elif thisBlock == 4:&amp;#10;        MyIndicesMain = &quot;210:282&quot;&amp;#10;    elif thisBlock == 5:&amp;#10;        MyIndicesMain = &quot;282:354&quot;&amp;#10;    elif thisBlock == 6:&amp;#10;        MyIndicesMain = &quot;354:426&quot;&amp;#10;elif expt_n == 2:&amp;#10;    if thisBlock == 1:&amp;#10;        MyIndicesMain = &quot;0:54&quot;&amp;#10;    elif thisBlock == 2: &amp;#10;        MyIndicesMain = &quot;54:108&quot;&amp;#10;    elif thisBlock == 3:&amp;#10;        MyIndicesMain = &quot;108:162&quot;&amp;#10;    elif thisBlock == 4:&amp;#10;        MyIndicesMain = &quot;162:234&quot;&amp;#10;    elif thisBlock == 5:&amp;#10;        MyIndicesMain = &quot;234:306&quot;&amp;#10;    elif thisBlock == 6:&amp;#10;        MyIndicesMain = &quot;306:378&quot;&amp;#10;elif expt_n == 3:&amp;#10;    if thisBlock == 1:&amp;#10;        MyIndicesMain = &quot;0:54&quot;&amp;#10;    elif thisBlock == 2: &amp;#10;        MyIndicesMain = &quot;54:108&quot;&amp;#10;    elif thisBlock == 3:&amp;#10;        MyIndicesMain = &quot;108:162&quot;&amp;#10;    elif thisBlock == 4:&amp;#10;        MyIndicesMain = &quot;162:232&quot;&amp;#10;    elif thisBlock == 5:&amp;#10;        MyIndicesMain = &quot;232:302&quot;&amp;#10;    elif thisBlock == 6:&amp;#10;        MyIndicesMain = &quot;302:372&quot;&amp;#10;# Update message before every new block&amp;#10;msgBlockNumber = 'You will start block ' + str(thisBlock) + ' out of 6. \nRemember that both accuracy and speed matter. \n[Press space bar to begin.]'&amp;#10;&amp;#10;# After block 3 we do the attention checks and introduce uro instructions&amp;#10;if thisBlock == 3:&amp;#10;    uroInstructions = 1&amp;#10;    repsAC = 1&amp;#10;    numberACresults = 1&amp;#10;else: &amp;#10;    uroInstructions = 0&amp;#10;    repsAC = 0&amp;#10;    numberACresults = 0" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="LoopContr" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <TextComponent name="beginBlock">
        <Param val="black" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="" valType="str" updates="constant" name="flip"/>
        <Param val="Sans Serif" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="code" updates="constant" name="letterHeight"/>
        <Param val="beginBlock" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="$msgBlockNumber" valType="str" updates="set every repeat" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <KeyboardComponent name="key_respStart">
        <Param val="'space'" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="key_respStart" valType="code" updates="None" name="name"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="nothing" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="instructions">
      <ImageComponent name="instr1">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="$current_img" valType="str" updates="set every repeat" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="None" valType="str" updates="constant" name="mask"/>
        <Param val="instr1" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="(2, 2)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="code" updates="constant" name="texture resolution"/>
        <Param val="norm" valType="str" updates="None" name="units"/>
      </ImageComponent>
      <KeyboardComponent name="keyNext">
        <Param val="'left', 'right', 'space'" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="keyNext" valType="code" updates="None" name="name"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="time (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="nothing" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
      <CodeComponent name="codeJScomponent">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="// alias for random func&amp;#10;&amp;#10;random = function (a) {&amp;#10;    return Math.random();&amp;#10;}&amp;#10;&amp;#10;// also define randint&amp;#10;&amp;#10;function randint(min, max) {&amp;#10;  return Math.floor(Math.random() * (max - min) ) + min;&amp;#10;}&amp;#10;&amp;#10;thisExp=psychoJS.experiment;&amp;#10;win=psychoJS.window;&amp;#10;event=psychoJS.eventManager;&amp;#10;&amp;#10;// read in p=1 from the file - change later&amp;#10;//var participantCount; &amp;#10;//participantCount = new TrialHandler({&amp;#10;//    psychoJS: psychoJS,&amp;#10;//    nReps: 1, method: TrialHandler.Method.RANDOM,&amp;#10;//    extraInfo: expInfo, originPath: undefined,&amp;#10;//    trialList: 'p_number_pilot.csv',&amp;#10;//    seed: undefined, name: 'participantCount'&amp;#10;//});&amp;#10;    &amp;#10;//trialList = participantCount.getTrialList();    &amp;#10;//p_number = trialList[0]['P_number'];&amp;#10;&amp;#10;//file_number = (Number.parseInt(p_number) + 1);&amp;#10;&amp;#10;// get width, height, browser id&amp;#10;var sUsrAg;&amp;#10;var nIdx;&amp;#10;function getBrowserId () {&amp;#10; var browsers = [&quot;MSIE&quot;, &quot;Firefox&quot;, &quot;Safari&quot;, &quot;Chrome&quot;, &quot;Opera&quot;];&amp;#10; sUsrAg = window.navigator.userAgent,&amp;#10; nIdx = browsers.length - 1;&amp;#10; for (nIdx; nIdx &gt; -1 &amp;&amp; sUsrAg.indexOf(browsers [nIdx]) === -1; nIdx--);&amp;#10; &amp;#10;  return browsers[nIdx];&amp;#10;}&amp;#10; &amp;#10;expInfo['browser'] = getBrowserId();&amp;#10;expInfo['xResolution'] = screen.width;&amp;#10;expInfo['yResolution'] = screen.height;&amp;#10;//W = screen.width;&amp;#10;//H = screen.height;" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="codeJScomponent" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <CodeComponent name="imagesSlides">
        <Param val="#Assign participant to expt 1,2 or 3&amp;#10;import random&amp;#10;expt_n = random.choice((1,2,3))&amp;#10;&amp;#10;if expt_n == 1:&amp;#10;    n_instructions1 = 14&amp;#10;    n_instructions2 = 19&amp;#10;elif expt_n ==2:&amp;#10;    n_instructions1 = 13&amp;#10;    n_instructions2 = 18&amp;#10;elif expt_n ==3:&amp;#10;    n_instructions1 = 13&amp;#10;    n_instructions2 = 17" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="import * as random from 'random';&amp;#10;var expt_n, n_instructions1, n_instructions2;&amp;#10;expt_n = random.choice([1, 2, 3]);&amp;#10;if ((expt_n === 1)) {&amp;#10;    n_instructions1 = 14;&amp;#10;    n_instructions2 = 19;&amp;#10;} else {&amp;#10;    if ((expt_n === 2)) {&amp;#10;        n_instructions1 = 13;&amp;#10;        n_instructions2 = 18;&amp;#10;    } else {&amp;#10;        if ((expt_n === 3)) {&amp;#10;            n_instructions1 = 13;&amp;#10;            n_instructions2 = 17;&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="img_no = 1&amp;#10;&amp;#10;current_img = 'expt_' + str(expt_n) + '/resources/instructions/Slide' + str(img_no) + '.jpg'&amp;#10;" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="img_no = 1;&amp;#10;current_img = ((((&quot;expt_&quot; + expt_n.toString()) + &quot;/resources/instructions/Slide&quot;) + img_no.toString()) + &quot;.jpg&quot;);&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="current_img = ((((&quot;expt_&quot; + expt_n.toString()) + &quot;/resources/instructions/Slide&quot;) + img_no.toString()) + &quot;.jpg&quot;);&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="current_img = 'expt_' + str(expt_n) + '/resources/instructions/Slide' + str(img_no) + '.jpg'&amp;#10;" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="if (((img_no &gt; 1) &amp;&amp; ((keyNext.keys === &quot;left&quot;.toString()) || (keyNext.keys === &quot;left&quot;)))) {&amp;#10;    img_no -= 1;&amp;#10;} else {&amp;#10;    if (((img_no &lt; n_instructions1) &amp;&amp; ((keyNext.keys === &quot;right&quot;.toString()) || (keyNext.keys === &quot;right&quot;)))) {&amp;#10;        img_no += 1;&amp;#10;    } else {&amp;#10;        if (((img_no === n_instructions1) &amp;&amp; ((keyNext.keys === &quot;space&quot;) || (keyNext.keys === &quot;space&quot;.toString())))) {&amp;#10;            instructionsLoop.finished = true;&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;current_img = ((((&quot;expt_&quot; + expt_n.toString()) + &quot;/resources/instructions/Slide&quot;) + img_no.toString()) + &quot;.jpg&quot;);&amp;#10;" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="# if the participant pressed the left key, decrease the image&amp;#10;# number by one (e. g. going from &quot;image 2&quot; to &quot;image 1&quot;),&amp;#10;# and if they pressed the right key, increase the image number&amp;#10;# by one (&quot;image 2&quot; -&gt; &quot;image 3&quot;)&amp;#10;if (img_no &gt; 1) and ((keyNext.keys == str('left')) or (keyNext.keys == 'left')):&amp;#10;    img_no -= 1&amp;#10;elif (img_no &lt; n_instructions1) and ((keyNext.keys == str('right')) or (keyNext.keys == 'right')):&amp;#10;    img_no += 1&amp;#10;elif (img_no == n_instructions1) and ((keyNext.keys == 'space') or (keyNext.keys == str('space'))):&amp;#10;    instructionsLoop.finished = True&amp;#10;current_img = 'expt_' + str(expt_n) + '/resources/instructions/Slide' + str(img_no) + '.jpg'" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="imagesSlides" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
    <Routine name="practice">
      <ImageComponent name="practiceP1">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="$LocItem1" valType="str" updates="set every repeat" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="None" valType="str" updates="constant" name="mask"/>
        <Param val="practiceP1" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(-250, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="(200, 200)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="2.5" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="code" updates="constant" name="texture resolution"/>
        <Param val="pix" valType="str" updates="None" name="units"/>
      </ImageComponent>
      <ImageComponent name="practiceP2">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="$LocItem2" valType="str" updates="set every repeat" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="None" valType="str" updates="constant" name="mask"/>
        <Param val="practiceP2" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(250, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="(200, 200)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="2.5" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="code" updates="constant" name="texture resolution"/>
        <Param val="pix" valType="str" updates="None" name="units"/>
      </ImageComponent>
      <KeyboardComponent name="practiceKey">
        <Param val="'left','right'" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="$CorrKey" valType="str" updates="constant" name="correctAns"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="practiceKey" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="2.5" valType="code" updates="constant" name="stopVal"/>
        <Param val="first key" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
      <CodeComponent name="practiceFeedb">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="# Feedback message&amp;#10;msgPractice = 'Feedback msg after practice trial'&amp;#10;&amp;#10;# Acc_practice to save code for accuracy&amp;#10;acc_practice = []&amp;#10;prac_trial = 0&amp;#10;tprac = []&amp;#10;durationBlank = 0.0" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="msgPractice = &quot;Feedback msg after practice trial&quot;;&amp;#10;acc_practice = [];&amp;#10;prac_trial = 0;&amp;#10;tprac = [];&amp;#10;durationBlank = 0.0;&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="prac_trial += 1;&amp;#10;tprac = prac_trial;&amp;#10;psychoJS.experiment.addData(&quot;tprac&quot;, tprac);&amp;#10;crossDisappear = 1;&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="# Update trial number and add it to outputfile&amp;#10;prac_trial += 1&amp;#10;tprac = prac_trial&amp;#10;thisExp.addData('tprac', tprac)&amp;#10;crossDisappear = 1&amp;#10;" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Both" valType="str" updates="None" name="Code Type"/>
        <Param val="if (practiceKey.keys == 'left') or (practiceKey.keys == 'right'): &amp;#10;    crossDisappear = 0" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="if (((practiceKey.keys === &quot;left&quot;) || (practiceKey.keys === &quot;right&quot;))) {&amp;#10;    crossDisappear = 0;&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="if ((practiceKey.keys === &quot;left&quot;)) {&amp;#10;    valueDiff = (P1 - P2);&amp;#10;}&amp;#10;if ((practiceKey.keys === &quot;right&quot;)) {&amp;#10;    valueDiff = (P2 - P1);&amp;#10;}&amp;#10;if ((practiceKey.keys === undefined)) {&amp;#10;    valueDiff = undefined;&amp;#10;}&amp;#10;value_dist = (P1 - P2);&amp;#10;value_dist_abs = Math.abs(value_dist);&amp;#10;if ((practiceKey.keys === undefined)) {&amp;#10;    msgPractice = &quot;TRY TO RESPOND FASTER&quot;;&amp;#10;} else {&amp;#10;    if ((value_dist_abs &gt; 1)) {&amp;#10;        msgPractice = &quot;&quot;;&amp;#10;        durationBlank = 0;&amp;#10;    } else {&amp;#10;        if ((value_dist_abs === 1)) {&amp;#10;            durationBlank = 0.5;&amp;#10;            if ((valueDiff &gt; 0)) {&amp;#10;                msgPractice = &quot;Correct&quot;;&amp;#10;            } else {&amp;#10;                if ((valueDiff &lt; 0)) {&amp;#10;                    msgPractice = &quot;Incorrect&quot;;&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;if ((valueDiff === undefined)) {&amp;#10;    acc_practice = 2;&amp;#10;} else {&amp;#10;    if ((valueDiff &gt; 0)) {&amp;#10;        acc_practice = 1;&amp;#10;    } else {&amp;#10;        if ((valueDiff &lt; 0)) {&amp;#10;            acc_practice = 0;&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;psychoJS.experiment.addData(&quot;acc_practice&quot;, acc_practice);&amp;#10;" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="### Practice feedback&amp;#10;# Catching response and calculating value; &gt; 0 means correct&amp;#10;&amp;#10;if practiceKey.keys == 'left': &amp;#10;    valueDiff = P1 - P2&amp;#10;if practiceKey.keys == 'right':&amp;#10;    valueDiff = P2 - P1&amp;#10;if practiceKey.keys is None:&amp;#10;    valueDiff = None&amp;#10;&amp;#10;# Calculating if items are neighbors or not &amp;#10;&amp;#10;value_dist = P1 - P2&amp;#10;value_dist_abs = abs(value_dist) &amp;#10;&amp;#10;# Loop for giving accurate feedback after every trial&amp;#10;# Participant doesn't respond on time&amp;#10;if practiceKey.keys is None: &amp;#10;    msgPractice = 'TRY TO RESPOND FASTER'&amp;#10;elif value_dist_abs &gt; 1:&amp;#10;    msgPractice = ''&amp;#10;    durationBlank = 0&amp;#10;elif value_dist_abs == 1:&amp;#10;    durationBlank = 0.5&amp;#10;    if valueDiff &gt; 0:&amp;#10;        msgPractice = 'Correct'&amp;#10;    elif valueDiff &lt; 0:&amp;#10;        msgPractice = 'Incorrect'&amp;#10;&amp;#10;# Loop for saving feedback and hits&amp;#10;if valueDiff is None:&amp;#10;    acc_practice = 2&amp;#10;elif valueDiff &gt; 0:&amp;#10;    acc_practice = 1  &amp;#10;elif valueDiff &lt; 0:&amp;#10;    acc_practice = 0&amp;#10;&amp;#10;thisExp.addData('acc_practice', acc_practice)&amp;#10;" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="practiceFeedb" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <PolygonComponent name="crossPractice">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="$[-1,-1,-1]" valType="str" updates="constant" name="fillColor"/>
        <Param val="rgb" valType="str" updates="constant" name="fillColorSpace"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="$[1,1,1]" valType="str" updates="constant" name="lineColor"/>
        <Param val="rgb" valType="str" updates="constant" name="lineColorSpace"/>
        <Param val="1" valType="code" updates="constant" name="lineWidth"/>
        <Param val="4" valType="int" updates="constant" name="nVertices"/>
        <Param val="crossPractice" valType="code" updates="None" name="name"/>
        <Param val="crossDisappear" valType="code" updates="set every frame" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="cross" valType="str" updates="constant" name="shape"/>
        <Param val="(20, 20)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="2.5" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="pix" valType="str" updates="None" name="units"/>
        <Param val="" valType="list" updates="constant" name="vertices"/>
      </PolygonComponent>
    </Routine>
    <Routine name="bonus">
      <CodeComponent name="bonusCode">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="msgBonus = 'Feedback msg to say if participant gets bonus'&amp;#10;get_bonus = []" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="msgBonus = &quot;Feedback msg to say if participant gets bonus&quot;;&amp;#10;get_bonus = [];&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="// Select a number of random trials from an array&amp;#10;function getRandomSubarray(arr, size) {&amp;#10;    var shuffled = arr.slice(0), i = arr.length, temp, index;&amp;#10;    while (i--) {&amp;#10;        index = Math.floor((i + 1) * Math.random());&amp;#10;        temp = shuffled[index];&amp;#10;        shuffled[index] = shuffled[i];&amp;#10;        shuffled[i] = temp;&amp;#10;    }&amp;#10;    return shuffled.slice(0, size);&amp;#10;}&amp;#10;&amp;#10;// Store 10 random trials in a variable and check their accuracy&amp;#10;var sampled_accuracies = getRandomSubarray(bonus_accuracies, 10);&amp;#10;var countBonuses = 0;&amp;#10;for(var i = 0; i &lt; sampled_accuracies.length; ++i){&amp;#10;    if(sampled_accuracies[i] == 1)&amp;#10;        countBonuses++;&amp;#10;}&amp;#10;&amp;#10;// Update messages depending on number of accurate responses&amp;#10;if (countBonuses &gt; 5) {&amp;#10;    msgBonus = &quot;Ten random responses from the main task were selected. \nCONGRATULATIONS! More than half of your responses were correct. \nYou will receive the BONUS! \n[Press space to continue]&quot;;&amp;#10;    get_bonus = 1;&amp;#10;    psychoJS.experiment.addData(&quot;Bonus&quot;, get_bonus);&amp;#10;} else {&amp;#10;    msgBonus = &quot;Sorry! Unfortunately, at least half of the ten randomly picked responses from the main task were not correct. \nYou cannot not receive the bonus \n[Press space to continue]&quot;;&amp;#10;    get_bonus = 0;&amp;#10;    psychoJS.experiment.addData(&quot;Bonus&quot;, get_bonus);&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="# Pick 10 random number from the accuracy counter&amp;#10;import random as random&amp;#10;sampled_accuracies = random.sample(bonus_accuracies, 10)&amp;#10;&amp;#10;# Display bonus message&amp;#10;if sampled_accuracies.count(1) &gt; 5:&amp;#10;    msgBonus = 'CONGRATULATIONS! The randomly picked responses were correct. You will receive the BONUS!\nPress SPACE to continue'&amp;#10;    get_bonus = 1&amp;#10;    thisExp.addData('Bonus', get_bonus)&amp;#10;else: &amp;#10;    msgBonus = 'Sorry! Unfortunately, the randomly picked responses were not correct. You cannot not receive the bonus\nPress SPACE to continue'&amp;#10;    " valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Both" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="bonusCode" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <KeyboardComponent name="key_resp2">
        <Param val="'space'" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="key_resp2" valType="code" updates="None" name="name"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="nothing" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
      <TextComponent name="presentBonus">
        <Param val="black" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="" valType="str" updates="constant" name="flip"/>
        <Param val="Sans Serif" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="code" updates="constant" name="letterHeight"/>
        <Param val="presentBonus" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="$msgBonus" valType="str" updates="set every repeat" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="constant" name="wrapWidth"/>
      </TextComponent>
    </Routine>
    <Routine name="PracFeedb_2">
      <TextComponent name="practiceFeedback">
        <Param val="black" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="" valType="str" updates="constant" name="flip"/>
        <Param val="Sans Serif" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="code" updates="constant" name="letterHeight"/>
        <Param val="practiceFeedback" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="0.5" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="$msgPractice" valType="str" updates="set every repeat" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <CodeComponent name="onsetFeedbackCode">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="startFeedb = globalClock.getTime();" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="// Store onset of feedbakc during practice&amp;#10;psychoJS.experiment.addData('onsetFeedbPrac', startFeedb + practiceFeedback.tStart);" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="onsetFeedbackCode" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <TextComponent name="screenAfterFB">
        <Param val="white" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="" valType="str" updates="constant" name="flip"/>
        <Param val="Calibri" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.1" valType="code" updates="constant" name="letterHeight"/>
        <Param val="screenAfterFB" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.5" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="$durationBlank" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="Any text&amp;#10;&amp;#10;including line breaks" valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="constant" name="wrapWidth"/>
      </TextComponent>
    </Routine>
    <Routine name="practiceBlocks">
      <CodeComponent name="codePracStart">
        <Param val="conditions_practice = ((&quot;expt_&quot; + str(expt_n) + &quot;/resources/conditions_practice.xlsx&quot;))" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="conditions_practice = ((&quot;expt_&quot; + expt_n.toString()) + &quot;/resources/conditions_practice.xlsx&quot;);&amp;#10;" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="# Counter for the practice blocks&amp;#10;practiceBlock = 0&amp;#10;&amp;#10;# Message to be updated before every block&amp;#10;msgStartPractice = 'message shown before a practice Block'&amp;#10;&amp;#10;# Highest stimulus value&amp;#10;&amp;#10;stim_num_max = 8" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="// Counter for the practice blocks&amp;#10;practiceBlock = 0;&amp;#10;&amp;#10;// Message to be updated before every practice block&amp;#10;msgStartPractice = &quot;message shown before a practice Block&quot;;&amp;#10;&amp;#10;&amp;#10;// highest item value in the sequence we use&amp;#10;&amp;#10;stim_num_max = 8;&amp;#10;&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="practiceBlock += 1;&amp;#10;&amp;#10;// For each block choose rows from the excel file that controls the loop &amp;#10;if ((practiceBlock === 1)) {&amp;#10;    myIndices = &quot;0:8&quot;;&amp;#10;    msgStartPractice = &quot;Let's start practicing this task.\nDon't worry about making mistakes, just try to understand the goal for this task.\n[Press space bar to continue]&quot;;&amp;#10;} else {&amp;#10;    myIndices = &quot;8:16&quot;;&amp;#10;    msgStartPractice = &quot;This is the second practice block. \nAgain, relax and try to get familiar with the task and the timing, don't worry about mistakes.\n[Press space bar to start]&quot;;&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="# First time we enter the loop, we are in block 1&amp;#10;&amp;#10;practiceBlock +=1&amp;#10;&amp;#10;# Update message before blocks&amp;#10;if practiceBlock == 1:&amp;#10;    myIndices = &quot;0:8&quot;&amp;#10;    msgStartPractice = 'Let\'s start practicing this task.\nDon\'t worry about making mistakes, just try to understand the goal for this task.\n[Press space bar to continue]'&amp;#10;else: &amp;#10;    myIndices = &quot;8:16&quot;&amp;#10;    msgStartPractice = 'This is the second practice block. \nAgain, relax and try to get familiar with the task and the timing, don\'t worry about mistakes.\n[Press space bar to start]'" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="codePracStart" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <KeyboardComponent name="key_startPrac">
        <Param val="'space'" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="key_startPrac" valType="code" updates="None" name="name"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="nothing" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
      <TextComponent name="practiceMessage">
        <Param val="black" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="" valType="str" updates="constant" name="flip"/>
        <Param val="Sans Serif" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="code" updates="constant" name="letterHeight"/>
        <Param val="practiceMessage" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="$msgStartPractice" valType="str" updates="set every repeat" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="constant" name="wrapWidth"/>
      </TextComponent>
    </Routine>
    <Routine name="finishExperiment">
      <TextComponent name="finalText">
        <Param val="black" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="" valType="str" updates="constant" name="flip"/>
        <Param val="Sans Serif" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="code" updates="constant" name="letterHeight"/>
        <Param val="finalText" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="Great! You finished the task. Thank you! &amp;#10;Press space to exit and please wait until you get redirected back to Prolific. " valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <KeyboardComponent name="key_respEnd">
        <Param val="'space', 'Escape'" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="key_respEnd" valType="code" updates="None" name="name"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="nothing" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="attentionCheck">
      <KeyboardComponent name="key_respAC">
        <Param val="'up','down','left','right'" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="$CorrAns" valType="str" updates="constant" name="correctAns"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="key_respAC" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="10" valType="code" updates="constant" name="stopVal"/>
        <Param val="first key" valType="str" updates="constant" name="store"/>
        <Param val="True" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
      <CodeComponent name="run_check">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="AC_acc = []&amp;#10;hits_in_attention2 = 0&amp;#10;" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="AC_acc = [];&amp;#10;hits_in_attention2 = 0;&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="if (key_respAC.corr) {&amp;#10;    AC_acc = 1;&amp;#10;    hits_in_attention2 += 1;&amp;#10;} else {&amp;#10;    AC_acc = 0;&amp;#10;}&amp;#10;thisExp.addData(&quot;AC_acc&quot;, AC_acc);&amp;#10;" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="if key_respAC.corr:&amp;#10;    AC_acc = 1&amp;#10;    hits_in_attention2 += 1&amp;#10;else:&amp;#10;    AC_acc = 0&amp;#10;    &amp;#10;thisExp.addData('AC_acc', AC_acc)&amp;#10;" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="run_check" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <TextComponent name="Pos1">
        <Param val="black" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="" valType="str" updates="constant" name="flip"/>
        <Param val="Sans Serif" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="code" updates="constant" name="letterHeight"/>
        <Param val="Pos1" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(0, 0.25)" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="10" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="$Loc1" valType="str" updates="set every repeat" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <TextComponent name="Pos2">
        <Param val="black" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="" valType="str" updates="constant" name="flip"/>
        <Param val="Sans Serif" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="code" updates="constant" name="letterHeight"/>
        <Param val="Pos2" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(0.3, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="10" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="$Loc2" valType="str" updates="set every repeat" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <TextComponent name="Pos3">
        <Param val="black" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="" valType="str" updates="constant" name="flip"/>
        <Param val="Sans Serif" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="code" updates="constant" name="letterHeight"/>
        <Param val="Pos3" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(0, -0.25)" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="10" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="$Loc3" valType="str" updates="set every repeat" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <TextComponent name="Pos4">
        <Param val="black" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="" valType="str" updates="constant" name="flip"/>
        <Param val="Sans Serif" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="code" updates="constant" name="letterHeight"/>
        <Param val="Pos4" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(-0.3, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="10" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="$Loc4" valType="str" updates="set every repeat" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <TextComponent name="shapeInstructions">
        <Param val="black" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="" valType="str" updates="constant" name="flip"/>
        <Param val="Sans Serif" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="code" updates="constant" name="letterHeight"/>
        <Param val="shapeInstructions" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(0, 0.40)" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="10" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="Use arrow keys to pick the number shown in the center" valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <TextComponent name="ac_stim">
        <Param val="black" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="" valType="str" updates="constant" name="flip"/>
        <Param val="Calibri" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="code" updates="constant" name="letterHeight"/>
        <Param val="ac_stim" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="10.0" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="$Stim" valType="str" updates="set every repeat" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="constant" name="wrapWidth"/>
      </TextComponent>
    </Routine>
    <Routine name="attentionCheckPrac">
      <KeyboardComponent name="key_respAC_prac">
        <Param val="'up','down','left','right'" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="$CorrAns" valType="str" updates="constant" name="correctAns"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="key_respAC_prac" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="10" valType="code" updates="constant" name="stopVal"/>
        <Param val="first key" valType="str" updates="constant" name="store"/>
        <Param val="True" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
      <CodeComponent name="run_check_prac">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="# List storing the accuracy as 1 or 0 &amp;#10;AC_acc = []&amp;#10;hits_in_attention = 0&amp;#10;abortMsg = ''" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="AC_acc = [];&amp;#10;hits_in_attention = 0;&amp;#10;abortMsg = &quot;&quot;;&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="// Add accuracy in attention checks to output file &amp;#10;if (key_respAC_prac.corr) {&amp;#10;    AC_acc = 1;&amp;#10;    hits_in_attention += 1;&amp;#10;} else {&amp;#10;    AC_acc = 0;&amp;#10;}&amp;#10;psychoJS.experiment.addData(&quot;AC_acc&quot;, AC_acc);&amp;#10;" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="# Add accuracy to output file &amp;#10;if key_respAC_prac.corr:&amp;#10;    AC_acc = 1&amp;#10;    hits_in_attention += 1&amp;#10;else:&amp;#10;    AC_acc = 0&amp;#10;    &amp;#10;thisExp.addData('AC_acc', AC_acc)" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="run_check_prac" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <TextComponent name="Pos1_prac">
        <Param val="black" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="" valType="str" updates="constant" name="flip"/>
        <Param val="Sans Serif" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="code" updates="constant" name="letterHeight"/>
        <Param val="Pos1_prac" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(0, 0.25)" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="10" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="$Loc1" valType="str" updates="set every repeat" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <TextComponent name="Pos2_prac">
        <Param val="black" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="" valType="str" updates="constant" name="flip"/>
        <Param val="Sans Serif" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="code" updates="constant" name="letterHeight"/>
        <Param val="Pos2_prac" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(0.3, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="10" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="$Loc2" valType="str" updates="set every repeat" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <TextComponent name="Pos3_prac">
        <Param val="black" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="" valType="str" updates="constant" name="flip"/>
        <Param val="Sans Serif" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="code" updates="constant" name="letterHeight"/>
        <Param val="Pos3_prac" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(0, -0.25)" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="10" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="$Loc3" valType="str" updates="set every repeat" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <TextComponent name="Pos4_prac">
        <Param val="black" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="" valType="str" updates="constant" name="flip"/>
        <Param val="Sans Serif" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="code" updates="constant" name="letterHeight"/>
        <Param val="Pos4_prac" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(-0.3, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="10" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="$Loc4" valType="str" updates="set every repeat" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <TextComponent name="taskAC_prac">
        <Param val="black" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="" valType="str" updates="constant" name="flip"/>
        <Param val="Sans Serif" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="code" updates="constant" name="letterHeight"/>
        <Param val="taskAC_prac" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(0, 0.40)" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="10" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="Use arrow keys to pick the number shown in the center" valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <TextComponent name="ac_stim_prac">
        <Param val="black" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="" valType="str" updates="constant" name="flip"/>
        <Param val="Calibri" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="code" updates="constant" name="letterHeight"/>
        <Param val="ac_stim_prac" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="10.0" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="$Stim" valType="str" updates="set every repeat" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="constant" name="wrapWidth"/>
      </TextComponent>
    </Routine>
    <Routine name="ContinueOrEnd">
      <CodeComponent name="AccuracyCheck">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="blockRepetitions = 0&amp;#10;numberQuits = 0" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="blockRepetitions = 0;&amp;#10;numberQuits = 0;&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="check_AC_acc = (Number.parseFloat(hits_in_attention) / 8.0);&amp;#10;if ((check_AC_acc &lt; 0.5)) {&amp;#10;    blockRepetitions = 0;&amp;#10;    repsBonus = 0;&amp;#10;    abortMsg = &quot;Your accuracy in the attention checks is too low. \nYou have reached the end of the experiment. \nPress space to quit the experiment. Thank you!&quot;;&amp;#10;    numberQuits = 1;&amp;#10;} else {&amp;#10;    blockRepetitions = 6;&amp;#10;    repsBonus = 1;&amp;#10;    abortMsg = &quot;You passed the attention checks. \nYou are about to start the real task with entirely new images. \nHere, both your accuracy and speed matter for the experiment. \n[ Press space bar to START ]&quot;;&amp;#10;    numberQuits = 0;&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="#Calculate accuracy in AC and end experiment if acc belor 50%&amp;#10;check_AC_acc = float(hits_in_attention)/8.0&amp;#10;&amp;#10;if check_AC_acc &lt; 0.50:&amp;#10;    # Skip whole real task&amp;#10;    blockRepetitions = 0&amp;#10;    repsBonus = 0&amp;#10;    abortMsg = 'Your accuracy in the attention checks is too low. \nYou have reached the end of the experiment. \nPress space to quit the experiment. Thank you!'&amp;#10;    numberQuits = 1&amp;#10;else:&amp;#10;    # Next line tells how many real blocks &amp;#10;    blockRepetitions = 6&amp;#10;    repsBonus = 1&amp;#10;    abortMsg = 'You passed the attention checks. \nYou are about to start the real task with entirely new images. \nHere, both your accuracy and speed matter for the experiment. \n[ Press space bar to START ]'&amp;#10;    numberQuits = 0" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="AccuracyCheck" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <TextComponent name="messageChecks">
        <Param val="black" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="" valType="str" updates="constant" name="flip"/>
        <Param val="Sans Serif" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="code" updates="constant" name="letterHeight"/>
        <Param val="messageChecks" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="$abortMsg&amp;#10;" valType="str" updates="set every repeat" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <KeyboardComponent name="key_endFail">
        <Param val="'space'" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="key_endFail" valType="code" updates="None" name="name"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="nothing" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="freeResponse">
      <TextComponent name="text">
        <Param val="black" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="" valType="str" updates="constant" name="flip"/>
        <Param val="Sans Serif" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="code" updates="constant" name="letterHeight"/>
        <Param val="text" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="" valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <CodeComponent name="typingText">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="// Variables for changing lower to upper case and for updating the text field&amp;#10;modify = false;&amp;#10;text.text = '';" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="# Code in this part is from https://gitlab.pavlovia.org/demos/textinput/&amp;#10;text.text = ''&amp;#10;modify = False&amp;#10;event.clearEvents('keyboard')" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="let theseKeys = psychoJS.eventManager.getKeys();&amp;#10;if (theseKeys.length &gt; 0) {  // at least one key was pressed&amp;#10;  textAdd = theseKeys[theseKeys.length-1]; &amp;#10;  }&amp;#10;&amp;#10;&amp;#10;if (textAdd === 'return') {&amp;#10;    textAdd = '';  // Add nothing&amp;#10;    continueRoutine = false;  // End routine (if that is what you want)&amp;#10;} else if (textAdd === 'comma') {&amp;#10;    textAdd = ', ';  // Add a comma&amp;#10;} else if (textAdd === 'space') {&amp;#10;    textAdd = ' ';  // Add a space&amp;#10;} else if (textAdd === 'period') {&amp;#10;    textAdd = '. ';  // Add a point&amp;#10;} else if (textAdd === 'backspace') {&amp;#10;    text.text = text.text.slice(0, -1);&amp;#10;    textAdd = undefined;&amp;#10;} else if (['lshift', 'rshift'].includes(textAdd)) {&amp;#10;    modify = true;&amp;#10;} else if (textAdd !== undefined) {&amp;#10;    if (modify) {&amp;#10;        text.text = text.text + textAdd.toUpperCase();&amp;#10;        modify = false;&amp;#10;    } else {&amp;#10;        text.text = text.text + textAdd&amp;#10;    }&amp;#10;    textAdd = undefined;&amp;#10;}" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="psychoJS.experiment.addData(&quot;comments&quot;, text.text);&amp;#10;" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="thisExp.addData(&quot;comments&quot;, subjectText.text)" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="typingText" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <TextComponent name="ask_for_feedb">
        <Param val="black" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="" valType="str" updates="constant" name="flip"/>
        <Param val="Sans Serif" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="code" updates="constant" name="letterHeight"/>
        <Param val="ask_for_feedb" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(0, 0.35)" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="How did you solve the task? What is cnarcy?  Please write down what you think. [When ready, press Enter to go to our last message]&amp;#10;" valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="constant" name="wrapWidth"/>
      </TextComponent>
    </Routine>
    <Routine name="rateItems">
      <ImageComponent name="item_to_rate">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="$Location" valType="str" updates="set every repeat" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="None" valType="str" updates="constant" name="mask"/>
        <Param val="item_to_rate" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="(300, 300)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="code" updates="constant" name="texture resolution"/>
        <Param val="pix" valType="str" updates="None" name="units"/>
      </ImageComponent>
      <KeyboardComponent name="keyNext_2">
        <Param val="'1','2','3','4','5','6','7','8'" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="keyNext_2" valType="code" updates="None" name="name"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="nothing" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
      <TextComponent name="ratingInstr">
        <Param val="black" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="" valType="str" updates="constant" name="flip"/>
        <Param val="Sans Serif" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="code" updates="constant" name="letterHeight"/>
        <Param val="ratingInstr" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(0, 0.35)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="Please order the objects according to their position (1 is the worst and 8 is the best). Type a number for every picture." valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="constant" name="wrapWidth"/>
      </TextComponent>
    </Routine>
    <Routine name="fixation_main">
      <PolygonComponent name="fixcross_2">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="$[-1.000,-1.000,-1.000]" valType="str" updates="constant" name="fillColor"/>
        <Param val="rgb" valType="str" updates="constant" name="fillColorSpace"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="$[1,1,1]" valType="str" updates="constant" name="lineColor"/>
        <Param val="rgb" valType="str" updates="constant" name="lineColorSpace"/>
        <Param val="1" valType="code" updates="constant" name="lineWidth"/>
        <Param val="4" valType="int" updates="constant" name="nVertices"/>
        <Param val="fixcross_2" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="cross" valType="str" updates="constant" name="shape"/>
        <Param val="(20, 20)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="frame N" valType="str" updates="None" name="startType"/>
        <Param val="0" valType="code" updates="None" name="startVal"/>
        <Param val="time (s)" valType="str" updates="None" name="stopType"/>
        <Param val="0.5" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="pix" valType="str" updates="None" name="units"/>
        <Param val="" valType="list" updates="constant" name="vertices"/>
      </PolygonComponent>
      <CodeComponent name="code_2">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="//trialtimer = new util.Clock(); //define a beginning of exp timer&amp;#10;&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="/* Syntax Error: Fix Python code */" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="# Jitter the timing of fixation cross 0.5 to 1.5 seconds&amp;#10;&amp;#10;#jitter = 30 + randint(0, 60)" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="// Store onset of the fixation cross in the main task to the output file&amp;#10;psychoJS.experiment.addData(&quot;fixcross_onsetMain&quot;, routineFixStart + fixcross_2.tStart);" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code_2" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
    <Routine name="instruct_understood"/>
    <Routine name="WelcomeScreen">
      <TextComponent name="welcome">
        <Param val="black" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="" valType="str" updates="constant" name="flip"/>
        <Param val="Calibri" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.07" valType="code" updates="constant" name="letterHeight"/>
        <Param val="welcome" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="Welcome to our online experiment!&amp;#10;&amp;#10;Press space to begin reading the instructions.&amp;#10;&amp;#10;You can switch through instruction slides with left and right keys" valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <KeyboardComponent name="startInstructions">
        <Param val="'space'" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="startInstructions" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="nothing" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
      <CodeComponent name="code">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="images = [&quot;Slide1.jpg&quot;, &quot;Slide2.jpg&quot;, &quot;Slide3.jpg&quot;, &quot;Slide4.jpg&quot;, &quot;Slide5.jpg&quot;, &quot;Slide6.jpg&quot;, &quot;Slide7.jpg&quot;, &quot;Slide8.jpg&quot;, &quot;Slide9.jpg&quot;, &quot;Slide10.jpg&quot;, &quot;Slide11.jpg&quot;, &quot;Slide12.jpg&quot;, &quot;Slide13.jpg&quot;];&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="images = ['Slide1.jpg', 'Slide2.jpg', 'Slide3.jpg', 'Slide4.jpg', 'Slide5.jpg', 'Slide6.jpg', 'Slide7.jpg', 'Slide8.jpg', 'Slide9.jpg', 'Slide10.jpg', 'Slide11.jpg', 'Slide12.jpg', 'Slide13.jpg']" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
    <Routine name="disturbance">
      <TextComponent name="disturbed">
        <Param val="black" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="" valType="str" updates="constant" name="flip"/>
        <Param val="Sans Serif" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="code" updates="constant" name="letterHeight"/>
        <Param val="disturbed" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="Were things around you quiet during the last block?&amp;#10;&amp;#10;Press '1' if you were disturbed and '0' if you were NOT disturbed.&amp;#10;&amp;#10;Please do NOT use the NumPad." valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <KeyboardComponent name="keyDisturbed">
        <Param val="'1', '0'" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="keyDisturbed" valType="code" updates="None" name="name"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="last key" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="False" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="quitExperiment">
      <CodeComponent name="quitExpCode">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="psychoJS.quit();" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="core.quit()" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="quitExpCode" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
    <Routine name="ContinueOrEnd2">
      <CodeComponent name="code_3">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="numberQuits2 = 0&amp;#10;msgEndExperiment = 'text after attention checks'" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="numberQuits2 = 0;&amp;#10;msgEndExperiment = &quot;text after attention checks&quot;;&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="check_AC_acc_2 = (Number.parseFloat(hits_in_attention2) / 8.0);&amp;#10;if ((check_AC_acc_2 &lt; 0.5)) {&amp;#10;    msgEndExperiment = &quot;Your accuracy in the attention checks is too low. \nYou have reached the end of the experiment. \nPress the space to quit the experiment. Thank you!&quot;;&amp;#10;    numberQuits2 = 1;&amp;#10;} else {&amp;#10;    msgEndExperiment = &quot;You passed the attention checks. \nPress space to see your feedback for the block.&quot;;&amp;#10;    numberQuits2 = 0;&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="# Force end of loop if subjects fail AC&amp;#10;check_AC_acc_2 = float(hits_in_attention2)/8.0&amp;#10;if check_AC_acc_2 &lt; 0.50:&amp;#10;    msgEndExperiment = 'Your accuracy in the attention checks is too low. \nYou have reached the end of the experiment. \nPress the space to quit the experiment. Thank you!'&amp;#10;    numberQuits2 = 1&amp;#10;else:&amp;#10;    msgEndExperiment = 'You passed the attention checks. \nPress space to see your feedback for the block.'&amp;#10;    numberQuits2 = 0" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code_3" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <TextComponent name="textEndExperiment">
        <Param val="black" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="" valType="str" updates="constant" name="flip"/>
        <Param val="Sans Serif" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="code" updates="constant" name="letterHeight"/>
        <Param val="textEndExperiment" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="$msgEndExperiment" valType="str" updates="set every repeat" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <KeyboardComponent name="pressToEndExp">
        <Param val="'space'" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="pressToEndExp" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="nothing" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="quitExperiment2">
      <CodeComponent name="quitExpCode_2">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="psychoJS.quit();" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="core.quit()" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="quitExpCode_2" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
    <Routine name="uro_instructions">
      <ImageComponent name="instr1_2">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="$current_uro_img" valType="str" updates="set every repeat" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="None" valType="str" updates="constant" name="mask"/>
        <Param val="instr1_2" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="(2, 2)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="code" updates="constant" name="texture resolution"/>
        <Param val="norm" valType="str" updates="None" name="units"/>
      </ImageComponent>
      <KeyboardComponent name="keyNext_3">
        <Param val="'left', 'right', 'space'" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="keyNext_3" valType="code" updates="None" name="name"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="time (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="nothing" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
      <CodeComponent name="codeJScomponent_2">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="// alias for random func&amp;#10;&amp;#10;random = function (a) {&amp;#10;    return Math.random();&amp;#10;}&amp;#10;&amp;#10;// also define randint&amp;#10;&amp;#10;function randint(min, max) {&amp;#10;  return Math.floor(Math.random() * (max - min) ) + min;&amp;#10;}&amp;#10;&amp;#10;thisExp=psychoJS.experiment;&amp;#10;win=psychoJS.window;&amp;#10;event=psychoJS.eventManager;&amp;#10;&amp;#10;// read in p=1 from the file - change later&amp;#10;//var participantCount; &amp;#10;//participantCount = new TrialHandler({&amp;#10;//    psychoJS: psychoJS,&amp;#10;//    nReps: 1, method: TrialHandler.Method.RANDOM,&amp;#10;//    extraInfo: expInfo, originPath: undefined,&amp;#10;//    trialList: 'p_number_pilot.csv',&amp;#10;//    seed: undefined, name: 'participantCount'&amp;#10;//});&amp;#10;    &amp;#10;//trialList = participantCount.getTrialList();    &amp;#10;//p_number = trialList[0]['P_number'];&amp;#10;&amp;#10;//file_number = (Number.parseInt(p_number) + 1);&amp;#10;&amp;#10;// get width, height, browser id&amp;#10;var sUsrAg;&amp;#10;var nIdx;&amp;#10;function getBrowserId () {&amp;#10; var browsers = [&quot;MSIE&quot;, &quot;Firefox&quot;, &quot;Safari&quot;, &quot;Chrome&quot;, &quot;Opera&quot;];&amp;#10; sUsrAg = window.navigator.userAgent,&amp;#10; nIdx = browsers.length - 1;&amp;#10; for (nIdx; nIdx &gt; -1 &amp;&amp; sUsrAg.indexOf(browsers [nIdx]) === -1; nIdx--);&amp;#10; &amp;#10;  return browsers[nIdx];&amp;#10;}&amp;#10; &amp;#10;expInfo['browser'] = getBrowserId();&amp;#10;expInfo['xResolution'] = screen.width;&amp;#10;expInfo['yResolution'] = screen.height;&amp;#10;//W = screen.width;&amp;#10;//H = screen.height;" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="codeJScomponent_2" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <CodeComponent name="imagesSlides_2">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="uro_img_no = n_instructions1+1&amp;#10;&amp;#10;current_uro_img = 'expt_'+str(expt_n)+'/resources/instructions/Slide' + str(uro_img_no) + '.jpg'" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="uro_img_no = (n_instructions1 + 1);&amp;#10;current_uro_img = ((((&quot;expt_&quot; + expt_n.toString()) + &quot;/resources/instructions/Slide&quot;) + uro_img_no.toString()) + &quot;.jpg&quot;);&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="current_uro_img = ((((&quot;expt_&quot; + expt_n.toString()) + &quot;/resources/instructions/Slide&quot;) + uro_img_no.toString()) + &quot;.jpg&quot;);&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="current_uro_img = 'expt_'+str(expt_n)+'/resources/instructions/Slide' + str(uro_img_no) + '.jpg'" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="if (((uro_img_no &gt; (n_instructions1 + 1)) &amp;&amp; ((keyNext_3.keys === &quot;left&quot;.toString()) || (keyNext_3.keys === &quot;left&quot;)))) {&amp;#10;    uro_img_no -= 1;&amp;#10;} else {&amp;#10;    if (((uro_img_no &lt; n_instructions2) &amp;&amp; ((keyNext_3.keys === &quot;right&quot;.toString()) || (keyNext_3.keys === &quot;right&quot;)))) {&amp;#10;        uro_img_no += 1;&amp;#10;    } else {&amp;#10;        if (((uro_img_no === n_instructions2) &amp;&amp; ((keyNext_3.keys === &quot;space&quot;) || (keyNext_3.keys === &quot;space&quot;.toString())))) {&amp;#10;            uro_instructionsLoop.finished = true;&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;current_uro_img = ((((&quot;expt_&quot; + expt_n.toString()) + &quot;/resources/instructions/Slide&quot;) + uro_img_no.toString()) + &quot;.jpg&quot;);&amp;#10;" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="&amp;#10;# if the participant pressed the left key, decrease the image&amp;#10;# number by one (e. g. going from &quot;image 2&quot; to &quot;image 1&quot;),&amp;#10;# and if they pressed the right key, increase the image number&amp;#10;# by one (&quot;image 2&quot; -&gt; &quot;image 3&quot;)&amp;#10;if (uro_img_no &gt; n_instructions1 + 1) and ((keyNext_3.keys == str('left')) or (keyNext_3.keys == 'left')):&amp;#10;    uro_img_no -= 1&amp;#10;elif (uro_img_no &lt; n_instructions2) and ((keyNext_3.keys == str('right')) or (keyNext_3.keys == 'right')):&amp;#10;    uro_img_no += 1&amp;#10;elif (uro_img_no == n_instructions2) and ((keyNext_3.keys == 'space') or (keyNext_3.keys == str('space'))):&amp;#10;    uro_instructionsLoop.finished = True&amp;#10;current_uro_img = 'expt_'+str(expt_n)+'/resources/instructions/Slide' + str(uro_img_no) + '.jpg'" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="imagesSlides_2" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
    <Routine name="uro_instructions_2"/>
  </Routines>
  <Flow>
    <LoopInitiator loopType="TrialHandler" name="instructionsLoop">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="" valType="str"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="sequential" valType="str"/>
      <Param name="nReps" updates="None" val="100" valType="code"/>
      <Param name="name" updates="None" val="instructionsLoop" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="instructions"/>
    <LoopTerminator name="instructionsLoop"/>
    <LoopInitiator loopType="TrialHandler" name="repPractice">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="" valType="str"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="False" valType="bool"/>
      <Param name="loopType" updates="None" val="sequential" valType="str"/>
      <Param name="nReps" updates="None" val="2" valType="code"/>
      <Param name="name" updates="None" val="repPractice" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="practiceBlocks"/>
    <LoopInitiator loopType="TrialHandler" name="practiceTrials">
      <Param name="Selected rows" updates="None" val="$myIndices" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="$conditions_practice" valType="str"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="sequential" valType="str"/>
      <Param name="nReps" updates="None" val="1" valType="code"/>
      <Param name="name" updates="None" val="practiceTrials" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="fixation_2"/>
    <Routine name="practice"/>
    <Routine name="PracFeedb_2"/>
    <LoopTerminator name="practiceTrials"/>
    <LoopInitiator loopType="TrialHandler" name="Attentions">
      <Param name="Selected rows" updates="None" val="0:4" valType="str"/>
      <Param name="conditions" updates="None" val="[{'Stim': 1, 'Loc1': 'one ↑', 'Loc2': 'three →', 'Loc3': 'four ↓', 'Loc4': '← two', 'CorrAns': 'up'}, {'Stim': 3, 'Loc1': 'two ↑', 'Loc2': 'one →', 'Loc3': 'three ↓', 'Loc4': '← four', 'CorrAns': 'down'}, {'Stim': 2, 'Loc1': 'three ↑', 'Loc2': 'four →', 'Loc3': 'one ↓', 'Loc4': '← two', 'CorrAns': 'left'}, {'Stim': 4, 'Loc1': 'two↑', 'Loc2': 'three →', 'Loc3': 'four ↓', 'Loc4': '← one', 'CorrAns': 'down'}, {'Stim': 1, 'Loc1': 'four ↑', 'Loc2': 'one →', 'Loc3': 'two ↓', 'Loc4': '← three', 'CorrAns': 'right'}, {'Stim': 3, 'Loc1': 'two ↑', 'Loc2': 'three →', 'Loc3': 'one ↓', 'Loc4': '← four', 'CorrAns': 'right'}, {'Stim': 2, 'Loc1': 'two ↑', 'Loc2': 'four →', 'Loc3': 'three ↓', 'Loc4': '← one', 'CorrAns': 'up'}, {'Stim': 4, 'Loc1': 'one ↑', 'Loc2': 'four →', 'Loc3': 'two ↓', 'Loc4': '← three', 'CorrAns': 'right'}]" valType="str"/>
      <Param name="conditionsFile" updates="None" val="expt_1/resources/attentionChecks.xlsx" valType="str"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="fullRandom" valType="str"/>
      <Param name="nReps" updates="None" val="1" valType="code"/>
      <Param name="name" updates="None" val="Attentions" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="attentionCheckPrac"/>
    <LoopTerminator name="Attentions"/>
    <Routine name="disturbance"/>
    <LoopTerminator name="repPractice"/>
    <Routine name="ContinueOrEnd"/>
    <LoopInitiator loopType="TrialHandler" name="quitExpLoop">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="" valType="str"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="random" valType="str"/>
      <Param name="nReps" updates="None" val="numberQuits" valType="code"/>
      <Param name="name" updates="None" val="quitExpLoop" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="quitExperiment"/>
    <LoopTerminator name="quitExpLoop"/>
    <LoopInitiator loopType="TrialHandler" name="repBlocks">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="" valType="str"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="False" valType="bool"/>
      <Param name="loopType" updates="None" val="sequential" valType="str"/>
      <Param name="nReps" updates="None" val="blockRepetitions" valType="code"/>
      <Param name="name" updates="None" val="repBlocks" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="LoopControl_2"/>
    <LoopInitiator loopType="TrialHandler" name="trials">
      <Param name="Selected rows" updates="None" val="$MyIndicesMain" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="$main_task_blocks" valType="str"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="sequential" valType="str"/>
      <Param name="nReps" updates="None" val="1" valType="code"/>
      <Param name="name" updates="None" val="trials" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="fixation_main"/>
    <Routine name="trial"/>
    <Routine name="feedback"/>
    <LoopTerminator name="trials"/>
    <LoopInitiator loopType="TrialHandler" name="trials_AC">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="[{'Stim': 1, 'Loc1': 'one ↑', 'Loc2': 'three →', 'Loc3': 'four ↓', 'Loc4': '← two', 'CorrAns': 'up'}, {'Stim': 3, 'Loc1': 'two ↑', 'Loc2': 'one →', 'Loc3': 'three ↓', 'Loc4': '← four', 'CorrAns': 'down'}, {'Stim': 2, 'Loc1': 'three ↑', 'Loc2': 'four →', 'Loc3': 'one ↓', 'Loc4': '← two', 'CorrAns': 'left'}, {'Stim': 4, 'Loc1': 'two↑', 'Loc2': 'three →', 'Loc3': 'four ↓', 'Loc4': '← one', 'CorrAns': 'down'}, {'Stim': 1, 'Loc1': 'four ↑', 'Loc2': 'one →', 'Loc3': 'two ↓', 'Loc4': '← three', 'CorrAns': 'right'}, {'Stim': 3, 'Loc1': 'two ↑', 'Loc2': 'three →', 'Loc3': 'one ↓', 'Loc4': '← four', 'CorrAns': 'right'}, {'Stim': 2, 'Loc1': 'two ↑', 'Loc2': 'four →', 'Loc3': 'three ↓', 'Loc4': '← one', 'CorrAns': 'up'}, {'Stim': 4, 'Loc1': 'one ↑', 'Loc2': 'four →', 'Loc3': 'two ↓', 'Loc4': '← three', 'CorrAns': 'right'}]" valType="str"/>
      <Param name="conditionsFile" updates="None" val="expt_1/resources/attentionChecks.xlsx" valType="str"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="fullRandom" valType="str"/>
      <Param name="nReps" updates="None" val="repsAC" valType="code"/>
      <Param name="name" updates="None" val="trials_AC" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="attentionCheck"/>
    <LoopTerminator name="trials_AC"/>
    <LoopInitiator loopType="TrialHandler" name="presentACresults">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="" valType="str"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="False" valType="bool"/>
      <Param name="loopType" updates="None" val="random" valType="str"/>
      <Param name="nReps" updates="None" val="numberACresults" valType="code"/>
      <Param name="name" updates="None" val="presentACresults" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="ContinueOrEnd2"/>
    <LoopTerminator name="presentACresults"/>
    <LoopInitiator loopType="TrialHandler" name="quitExpLoop2">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="" valType="str"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="random" valType="str"/>
      <Param name="nReps" updates="None" val="numberQuits2" valType="code"/>
      <Param name="name" updates="None" val="quitExpLoop2" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="quitExperiment2"/>
    <LoopTerminator name="quitExpLoop2"/>
    <Routine name="BlockFeedback"/>
    <Routine name="disturbance"/>
    <LoopInitiator loopType="TrialHandler" name="uro_instr_reps">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="" valType="file"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="fullRandom" valType="str"/>
      <Param name="nReps" updates="None" val="uroInstructions" valType="num"/>
      <Param name="name" updates="None" val="uro_instr_reps" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <LoopInitiator loopType="TrialHandler" name="uro_instructionsLoop">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="" valType="file"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="sequential" valType="str"/>
      <Param name="nReps" updates="None" val="100" valType="num"/>
      <Param name="name" updates="None" val="uro_instructionsLoop" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="uro_instructions"/>
    <LoopTerminator name="uro_instructionsLoop"/>
    <LoopTerminator name="uro_instr_reps"/>
    <LoopTerminator name="repBlocks"/>
    <LoopInitiator loopType="TrialHandler" name="BonusLoop">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="" valType="str"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="False" valType="bool"/>
      <Param name="loopType" updates="None" val="random" valType="str"/>
      <Param name="nReps" updates="None" val="repsBonus" valType="code"/>
      <Param name="name" updates="None" val="BonusLoop" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="bonus"/>
    <LoopTerminator name="BonusLoop"/>
    <Routine name="finishExperiment"/>
  </Flow>
</PsychoPy2experiment>
